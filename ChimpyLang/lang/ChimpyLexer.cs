//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g 2012-08-26 23:49:05

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  ChimpyLang 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class ChimpyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int ASSIGN=5;
	public const int AT=6;
	public const int CATCH=7;
	public const int CLASS=8;
	public const int CLOSE_PARENT=9;
	public const int COLON=10;
	public const int COMMA=11;
	public const int COMMENT=12;
	public const int CONSTANT=13;
	public const int DEF=14;
	public const int DIGIT=15;
	public const int DIV=16;
	public const int DOT=17;
	public const int ELSE=18;
	public const int END=19;
	public const int EQ=20;
	public const int FALSE=21;
	public const int FLOAT=22;
	public const int GE=23;
	public const int GT=24;
	public const int ID_CHAR=25;
	public const int IF=26;
	public const int INTEGER=27;
	public const int LE=28;
	public const int LETTER=29;
	public const int LOWER=30;
	public const int LT=31;
	public const int MINUS=32;
	public const int MOD=33;
	public const int MUL=34;
	public const int NAME=35;
	public const int NEWLINE=36;
	public const int NIL=37;
	public const int NOT=38;
	public const int NUMBER=39;
	public const int OPEN_PARENT=40;
	public const int OR=41;
	public const int PLUS=42;
	public const int SELF=43;
	public const int SEMICOLON=44;
	public const int SPACE=45;
	public const int STRING=46;
	public const int TRUE=47;
	public const int TRY=48;
	public const int UPPER=49;
	public const int WHILE=50;

	  bool methodMode = false; // true if we're waiting for a method name

	  public override IToken NextToken() {
	    IToken t = base.NextToken();
	    // DEBUG Uncomment to output tokens
	    // System.out.println("TOKEN> " + t);
	    return t;
	  }
	  
	  public bool isNum(int c) {
	    return c>='0' && c<='9';
	  }
	  
	  public override void ReportError(RecognitionException e) {
	    throw new RuntimeException(e);
	  }


    // delegates
    // delegators

	public ChimpyLexer()
	{
		OnCreated();
	}

	public ChimpyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ChimpyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_CLASS();
	partial void LeaveRule_CLASS();

	// $ANTLR start "CLASS"
	[GrammarRule("CLASS")]
	private void mCLASS()
	{
		EnterRule_CLASS();
		EnterRule("CLASS", 1);
		TraceIn("CLASS", 1);
		try
		{
			int _type = CLASS;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:31:6: ({...}? => 'class' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:31:21: {...}? => 'class'
			{
			DebugLocation(31, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "CLASS", "!methodMode");
			}
			DebugLocation(31, 38);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLASS", 1);
			LeaveRule("CLASS", 1);
			LeaveRule_CLASS();
		}
	}
	// $ANTLR end "CLASS"

	partial void EnterRule_DEF();
	partial void LeaveRule_DEF();

	// $ANTLR start "DEF"
	[GrammarRule("DEF")]
	private void mDEF()
	{
		EnterRule_DEF();
		EnterRule("DEF", 2);
		TraceIn("DEF", 2);
		try
		{
			int _type = DEF;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:32:4: ({...}? => 'def' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:32:21: {...}? => 'def'
			{
			DebugLocation(32, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "DEF", "!methodMode");
			}
			DebugLocation(32, 38);
			Match("def"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEF", 2);
			LeaveRule("DEF", 2);
			LeaveRule_DEF();
		}
	}
	// $ANTLR end "DEF"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 3);
		TraceIn("IF", 3);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:33:3: ({...}? => 'if' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:33:21: {...}? => 'if'
			{
			DebugLocation(33, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "IF", "!methodMode");
			}
			DebugLocation(33, 38);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 3);
			LeaveRule("IF", 3);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 4);
		TraceIn("ELSE", 4);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:34:5: ({...}? => 'else' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:34:21: {...}? => 'else'
			{
			DebugLocation(34, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "ELSE", "!methodMode");
			}
			DebugLocation(34, 38);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 4);
			LeaveRule("ELSE", 4);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 5);
		TraceIn("WHILE", 5);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:35:6: ({...}? => 'while' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:35:21: {...}? => 'while'
			{
			DebugLocation(35, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "WHILE", "!methodMode");
			}
			DebugLocation(35, 38);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 5);
			LeaveRule("WHILE", 5);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_TRY();
	partial void LeaveRule_TRY();

	// $ANTLR start "TRY"
	[GrammarRule("TRY")]
	private void mTRY()
	{
		EnterRule_TRY();
		EnterRule("TRY", 6);
		TraceIn("TRY", 6);
		try
		{
			int _type = TRY;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:36:4: ({...}? => 'try' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:36:21: {...}? => 'try'
			{
			DebugLocation(36, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "TRY", "!methodMode");
			}
			DebugLocation(36, 38);
			Match("try"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRY", 6);
			LeaveRule("TRY", 6);
			LeaveRule_TRY();
		}
	}
	// $ANTLR end "TRY"

	partial void EnterRule_CATCH();
	partial void LeaveRule_CATCH();

	// $ANTLR start "CATCH"
	[GrammarRule("CATCH")]
	private void mCATCH()
	{
		EnterRule_CATCH();
		EnterRule("CATCH", 7);
		TraceIn("CATCH", 7);
		try
		{
			int _type = CATCH;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:37:6: ({...}? => 'catch' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:37:21: {...}? => 'catch'
			{
			DebugLocation(37, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "CATCH", "!methodMode");
			}
			DebugLocation(37, 38);
			Match("catch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CATCH", 7);
			LeaveRule("CATCH", 7);
			LeaveRule_CATCH();
		}
	}
	// $ANTLR end "CATCH"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 8);
		TraceIn("END", 8);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:38:4: ({...}? => 'end' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:38:21: {...}? => 'end'
			{
			DebugLocation(38, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "END", "!methodMode");
			}
			DebugLocation(38, 38);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 8);
			LeaveRule("END", 8);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_SELF();
	partial void LeaveRule_SELF();

	// $ANTLR start "SELF"
	[GrammarRule("SELF")]
	private void mSELF()
	{
		EnterRule_SELF();
		EnterRule("SELF", 9);
		TraceIn("SELF", 9);
		try
		{
			int _type = SELF;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:39:5: ({...}? => 'self' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:39:21: {...}? => 'self'
			{
			DebugLocation(39, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "SELF", "!methodMode");
			}
			DebugLocation(39, 38);
			Match("self"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELF", 9);
			LeaveRule("SELF", 9);
			LeaveRule_SELF();
		}
	}
	// $ANTLR end "SELF"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 10);
		TraceIn("NIL", 10);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:40:4: ({...}? => 'nil' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:40:21: {...}? => 'nil'
			{
			DebugLocation(40, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "NIL", "!methodMode");
			}
			DebugLocation(40, 38);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 10);
			LeaveRule("NIL", 10);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 11);
		TraceIn("TRUE", 11);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:41:5: ({...}? => 'true' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:41:21: {...}? => 'true'
			{
			DebugLocation(41, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "TRUE", "!methodMode");
			}
			DebugLocation(41, 38);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 11);
			LeaveRule("TRUE", 11);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 12);
		TraceIn("FALSE", 12);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:42:6: ({...}? => 'false' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:42:21: {...}? => 'false'
			{
			DebugLocation(42, 21);
			if (!((!methodMode)))
			{
				throw new FailedPredicateException(input, "FALSE", "!methodMode");
			}
			DebugLocation(42, 38);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 12);
			LeaveRule("FALSE", 12);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 13);
		TraceIn("INTEGER", 13);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:46:17: ()
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:46:18: 
			{
			}

		}
		finally
		{
			TraceOut("INTEGER", 13);
			LeaveRule("INTEGER", 13);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 14);
		TraceIn("FLOAT", 14);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:47:15: ()
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:47:16: 
			{
			}

		}
		finally
		{
			TraceOut("FLOAT", 14);
			LeaveRule("FLOAT", 14);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 15);
		TraceIn("NUMBER", 15);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:48:7: ( ( '-' )? ( DIGIT )+ ({...}? => '.' ( DIGIT )+ |) )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:48:21: ( '-' )? ( DIGIT )+ ({...}? => '.' ( DIGIT )+ |)
			{
			DebugLocation(48, 21);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:48:21: ( '-' )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='-'))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:48:21: '-'
				{
				DebugLocation(48, 21);
				Match('-'); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(48, 26);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:48:26: ( DIGIT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
					{
					DebugLocation(48, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(50, 23);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:50:23: ({...}? => '.' ( DIGIT )+ |)
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='.') && ((isNum(input.LA(2)))))
			{
				alt4 = 1;
			}
			else
			{
				alt4 = 2;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:50:25: {...}? => '.' ( DIGIT )+
				{
				DebugLocation(50, 25);
				if (!((isNum(input.LA(2)))))
				{
					throw new FailedPredicateException(input, "NUMBER", "isNum(input.LA(2))");
				}
				DebugLocation(50, 49);
				Match('.'); 
				DebugLocation(50, 53);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:50:53: ( DIGIT )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
						{
						DebugLocation(50, 53);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(50, 61);
				 _type = FLOAT; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:51:61: 
				{
				DebugLocation(51, 61);
				 _type = INTEGER; 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 15);
			LeaveRule("NUMBER", 15);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 16);
		TraceIn("STRING", 16);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:53:7: ( '\"' (~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:53:21: '\"' (~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(53, 21);
			Match('\"'); 
			DebugLocation(53, 25);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:53:25: (~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='\u0000' && LA5_0<='!')||(LA5_0>='#' && LA5_0<='[')||(LA5_0>=']' && LA5_0<='\uFFFF')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
					{
					DebugLocation(53, 25);
					input.Consume();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(53, 40);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 16);
			LeaveRule("STRING", 16);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 17);
		TraceIn("NAME", 17);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:54:5: ( ( LOWER | '_' ) ( ID_CHAR )* ( '!' | '?' )? )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:54:21: ( LOWER | '_' ) ( ID_CHAR )* ( '!' | '?' )?
			{
			DebugLocation(54, 21);
			if (input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(54, 35);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:54:35: ( ID_CHAR )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')||(LA6_0>='A' && LA6_0<='Z')||LA6_0=='_'||(LA6_0>='a' && LA6_0<='z')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
					{
					DebugLocation(54, 35);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(54, 44);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:54:44: ( '!' | '?' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0=='!'||LA7_0=='?'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
				{
				DebugLocation(54, 44);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(54, 57);
			 methodMode = false; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 17);
			LeaveRule("NAME", 17);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_CONSTANT();
	partial void LeaveRule_CONSTANT();

	// $ANTLR start "CONSTANT"
	[GrammarRule("CONSTANT")]
	private void mCONSTANT()
	{
		EnterRule_CONSTANT();
		EnterRule("CONSTANT", 18);
		TraceIn("CONSTANT", 18);
		try
		{
			int _type = CONSTANT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:55:9: ( UPPER ( ID_CHAR )* )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:55:21: UPPER ( ID_CHAR )*
			{
			DebugLocation(55, 21);
			mUPPER(); 
			DebugLocation(55, 27);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:55:27: ( ID_CHAR )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')||(LA8_0>='A' && LA8_0<='Z')||LA8_0=='_'||(LA8_0>='a' && LA8_0<='z')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
					{
					DebugLocation(55, 27);
					input.Consume();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CONSTANT", 18);
			LeaveRule("CONSTANT", 18);
			LeaveRule_CONSTANT();
		}
	}
	// $ANTLR end "CONSTANT"

	partial void EnterRule_SEMICOLON();
	partial void LeaveRule_SEMICOLON();

	// $ANTLR start "SEMICOLON"
	[GrammarRule("SEMICOLON")]
	private void mSEMICOLON()
	{
		EnterRule_SEMICOLON();
		EnterRule("SEMICOLON", 19);
		TraceIn("SEMICOLON", 19);
		try
		{
			int _type = SEMICOLON;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:58:10: ( ';' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:58:21: ';'
			{
			DebugLocation(58, 21);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMICOLON", 19);
			LeaveRule("SEMICOLON", 19);
			LeaveRule_SEMICOLON();
		}
	}
	// $ANTLR end "SEMICOLON"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 20);
		TraceIn("COLON", 20);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:59:6: ( ':' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:59:21: ':'
			{
			DebugLocation(59, 21);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 20);
			LeaveRule("COLON", 20);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 21);
		TraceIn("DOT", 21);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:60:4: ( '.' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:60:21: '.'
			{
			DebugLocation(60, 21);
			Match('.'); 
			DebugLocation(60, 25);
			 methodMode = true; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 21);
			LeaveRule("DOT", 21);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 22);
		TraceIn("COMMA", 22);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:61:6: ( ',' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:61:21: ','
			{
			DebugLocation(61, 21);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 22);
			LeaveRule("COMMA", 22);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_OPEN_PARENT();
	partial void LeaveRule_OPEN_PARENT();

	// $ANTLR start "OPEN_PARENT"
	[GrammarRule("OPEN_PARENT")]
	private void mOPEN_PARENT()
	{
		EnterRule_OPEN_PARENT();
		EnterRule("OPEN_PARENT", 23);
		TraceIn("OPEN_PARENT", 23);
		try
		{
			int _type = OPEN_PARENT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:62:12: ( '(' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:62:21: '('
			{
			DebugLocation(62, 21);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_PARENT", 23);
			LeaveRule("OPEN_PARENT", 23);
			LeaveRule_OPEN_PARENT();
		}
	}
	// $ANTLR end "OPEN_PARENT"

	partial void EnterRule_CLOSE_PARENT();
	partial void LeaveRule_CLOSE_PARENT();

	// $ANTLR start "CLOSE_PARENT"
	[GrammarRule("CLOSE_PARENT")]
	private void mCLOSE_PARENT()
	{
		EnterRule_CLOSE_PARENT();
		EnterRule("CLOSE_PARENT", 24);
		TraceIn("CLOSE_PARENT", 24);
		try
		{
			int _type = CLOSE_PARENT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:63:13: ( ')' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:63:21: ')'
			{
			DebugLocation(63, 21);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_PARENT", 24);
			LeaveRule("CLOSE_PARENT", 24);
			LeaveRule_CLOSE_PARENT();
		}
	}
	// $ANTLR end "CLOSE_PARENT"

	partial void EnterRule_AT();
	partial void LeaveRule_AT();

	// $ANTLR start "AT"
	[GrammarRule("AT")]
	private void mAT()
	{
		EnterRule_AT();
		EnterRule("AT", 25);
		TraceIn("AT", 25);
		try
		{
			int _type = AT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:64:3: ( '@' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:64:21: '@'
			{
			DebugLocation(64, 21);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AT", 25);
			LeaveRule("AT", 25);
			LeaveRule_AT();
		}
	}
	// $ANTLR end "AT"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 26);
		TraceIn("EQ", 26);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:65:3: ( '==' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:65:21: '=='
			{
			DebugLocation(65, 21);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 26);
			LeaveRule("EQ", 26);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 27);
		TraceIn("LE", 27);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:66:3: ( '<=' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:66:21: '<='
			{
			DebugLocation(66, 21);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 27);
			LeaveRule("LE", 27);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 28);
		TraceIn("GE", 28);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:67:3: ( '>=' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:67:21: '>='
			{
			DebugLocation(67, 21);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 28);
			LeaveRule("GE", 28);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 29);
		TraceIn("LT", 29);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:68:3: ( '<' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:68:21: '<'
			{
			DebugLocation(68, 21);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 29);
			LeaveRule("LT", 29);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 30);
		TraceIn("GT", 30);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:69:3: ( '>' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:69:21: '>'
			{
			DebugLocation(69, 21);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 30);
			LeaveRule("GT", 30);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 31);
		TraceIn("PLUS", 31);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:70:5: ( '+' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:70:21: '+'
			{
			DebugLocation(70, 21);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 31);
			LeaveRule("PLUS", 31);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 32);
		TraceIn("MINUS", 32);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:71:6: ( '-' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:71:21: '-'
			{
			DebugLocation(71, 21);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 32);
			LeaveRule("MINUS", 32);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 33);
		TraceIn("MUL", 33);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:72:4: ( '*' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:72:21: '*'
			{
			DebugLocation(72, 21);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 33);
			LeaveRule("MUL", 33);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 34);
		TraceIn("DIV", 34);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:73:4: ( '/' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:73:21: '/'
			{
			DebugLocation(73, 21);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 34);
			LeaveRule("DIV", 34);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 35);
		TraceIn("MOD", 35);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:74:4: ( '%' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:74:21: '%'
			{
			DebugLocation(74, 21);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 35);
			LeaveRule("MOD", 35);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 36);
		TraceIn("AND", 36);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:75:4: ( '&&' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:75:21: '&&'
			{
			DebugLocation(75, 21);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 36);
			LeaveRule("AND", 36);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 37);
		TraceIn("OR", 37);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:76:3: ( '||' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:76:21: '||'
			{
			DebugLocation(76, 21);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 37);
			LeaveRule("OR", 37);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 38);
		TraceIn("NOT", 38);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:77:4: ( '!' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:77:21: '!'
			{
			DebugLocation(77, 21);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 38);
			LeaveRule("NOT", 38);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 39);
		TraceIn("ASSIGN", 39);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:78:7: ( '=' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:78:21: '='
			{
			DebugLocation(78, 21);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 39);
			LeaveRule("ASSIGN", 39);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 40);
		TraceIn("COMMENT", 40);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:8: ( '#' (~ ( '\\r' | '\\n' ) )* ( NEWLINE | EOF ) )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:21: '#' (~ ( '\\r' | '\\n' ) )* ( NEWLINE | EOF )
			{
			DebugLocation(80, 21);
			Match('#'); 
			DebugLocation(80, 25);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:25: (~ ( '\\r' | '\\n' ) )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='\u0000' && LA9_0<='\t')||(LA9_0>='\u000B' && LA9_0<='\f')||(LA9_0>='\u000E' && LA9_0<='\uFFFF')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
					{
					DebugLocation(80, 25);
					input.Consume();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(80, 41);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:41: ( NEWLINE | EOF )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='\n'||LA10_0=='\r'))
			{
				alt10 = 1;
			}
			else
			{
				alt10 = 2;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:42: NEWLINE
				{
				DebugLocation(80, 42);
				mNEWLINE(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:80:52: EOF
				{
				DebugLocation(80, 52);
				Match(EOF); 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(80, 57);
			 Skip(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 40);
			LeaveRule("COMMENT", 40);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 41);
		TraceIn("NEWLINE", 41);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:82:8: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:82:21: ( '\\r' )? '\\n'
			{
			DebugLocation(82, 21);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:82:21: ( '\\r' )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0=='\r'))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:82:21: '\\r'
				{
				DebugLocation(82, 21);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(82, 27);
			Match('\n'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 41);
			LeaveRule("NEWLINE", 41);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 42);
		TraceIn("LETTER", 42);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:85:16: ( LOWER | UPPER )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(85, 16);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 42);
			LeaveRule("LETTER", 42);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_ID_CHAR();
	partial void LeaveRule_ID_CHAR();

	// $ANTLR start "ID_CHAR"
	[GrammarRule("ID_CHAR")]
	private void mID_CHAR()
	{
		EnterRule_ID_CHAR();
		EnterRule("ID_CHAR", 43);
		TraceIn("ID_CHAR", 43);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:86:17: ( LETTER | DIGIT | '_' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(86, 17);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ID_CHAR", 43);
			LeaveRule("ID_CHAR", 43);
			LeaveRule_ID_CHAR();
		}
	}
	// $ANTLR end "ID_CHAR"

	partial void EnterRule_LOWER();
	partial void LeaveRule_LOWER();

	// $ANTLR start "LOWER"
	[GrammarRule("LOWER")]
	private void mLOWER()
	{
		EnterRule_LOWER();
		EnterRule("LOWER", 44);
		TraceIn("LOWER", 44);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:87:15: ( 'a' .. 'z' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(87, 15);
			if ((input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LOWER", 44);
			LeaveRule("LOWER", 44);
			LeaveRule_LOWER();
		}
	}
	// $ANTLR end "LOWER"

	partial void EnterRule_UPPER();
	partial void LeaveRule_UPPER();

	// $ANTLR start "UPPER"
	[GrammarRule("UPPER")]
	private void mUPPER()
	{
		EnterRule_UPPER();
		EnterRule("UPPER", 45);
		TraceIn("UPPER", 45);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:88:15: ( 'A' .. 'Z' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(88, 15);
			if ((input.LA(1)>='A' && input.LA(1)<='Z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("UPPER", 45);
			LeaveRule("UPPER", 45);
			LeaveRule_UPPER();
		}
	}
	// $ANTLR end "UPPER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 46);
		TraceIn("DIGIT", 46);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:89:15: ( '0' .. '9' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(89, 15);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 46);
			LeaveRule("DIGIT", 46);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_SPACE();
	partial void LeaveRule_SPACE();

	// $ANTLR start "SPACE"
	[GrammarRule("SPACE")]
	private void mSPACE()
	{
		EnterRule_SPACE();
		EnterRule("SPACE", 47);
		TraceIn("SPACE", 47);
		try
		{
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:90:15: ( ' ' | '\\t' )
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:
			{
			DebugLocation(90, 15);
			if (input.LA(1)=='\t'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("SPACE", 47);
			LeaveRule("SPACE", 47);
			LeaveRule_SPACE();
		}
	}
	// $ANTLR end "SPACE"

	public override void mTokens()
	{
		// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:8: ( CLASS | DEF | IF | ELSE | WHILE | TRY | CATCH | END | SELF | NIL | TRUE | FALSE | NUMBER | STRING | NAME | CONSTANT | SEMICOLON | COLON | DOT | COMMA | OPEN_PARENT | CLOSE_PARENT | AT | EQ | LE | GE | LT | GT | PLUS | MINUS | MUL | DIV | MOD | AND | OR | NOT | ASSIGN | COMMENT | NEWLINE )
		int alt12=39;
		try { DebugEnterDecision(12, false);
		try
		{
			alt12 = dfa12.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(12); }
		switch (alt12)
		{
		case 1:
			DebugEnterAlt(1);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:10: CLASS
			{
			DebugLocation(1, 10);
			mCLASS(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:16: DEF
			{
			DebugLocation(1, 16);
			mDEF(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:20: IF
			{
			DebugLocation(1, 20);
			mIF(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:23: ELSE
			{
			DebugLocation(1, 23);
			mELSE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:28: WHILE
			{
			DebugLocation(1, 28);
			mWHILE(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:34: TRY
			{
			DebugLocation(1, 34);
			mTRY(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:38: CATCH
			{
			DebugLocation(1, 38);
			mCATCH(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:44: END
			{
			DebugLocation(1, 44);
			mEND(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:48: SELF
			{
			DebugLocation(1, 48);
			mSELF(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:53: NIL
			{
			DebugLocation(1, 53);
			mNIL(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:57: TRUE
			{
			DebugLocation(1, 57);
			mTRUE(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:62: FALSE
			{
			DebugLocation(1, 62);
			mFALSE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:68: NUMBER
			{
			DebugLocation(1, 68);
			mNUMBER(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:75: STRING
			{
			DebugLocation(1, 75);
			mSTRING(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:82: NAME
			{
			DebugLocation(1, 82);
			mNAME(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:87: CONSTANT
			{
			DebugLocation(1, 87);
			mCONSTANT(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:96: SEMICOLON
			{
			DebugLocation(1, 96);
			mSEMICOLON(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:106: COLON
			{
			DebugLocation(1, 106);
			mCOLON(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:112: DOT
			{
			DebugLocation(1, 112);
			mDOT(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:116: COMMA
			{
			DebugLocation(1, 116);
			mCOMMA(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:122: OPEN_PARENT
			{
			DebugLocation(1, 122);
			mOPEN_PARENT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:134: CLOSE_PARENT
			{
			DebugLocation(1, 134);
			mCLOSE_PARENT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:147: AT
			{
			DebugLocation(1, 147);
			mAT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:150: EQ
			{
			DebugLocation(1, 150);
			mEQ(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:153: LE
			{
			DebugLocation(1, 153);
			mLE(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:156: GE
			{
			DebugLocation(1, 156);
			mGE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:159: LT
			{
			DebugLocation(1, 159);
			mLT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:162: GT
			{
			DebugLocation(1, 162);
			mGT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:165: PLUS
			{
			DebugLocation(1, 165);
			mPLUS(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:170: MINUS
			{
			DebugLocation(1, 170);
			mMINUS(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:176: MUL
			{
			DebugLocation(1, 176);
			mMUL(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:180: DIV
			{
			DebugLocation(1, 180);
			mDIV(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:184: MOD
			{
			DebugLocation(1, 184);
			mMOD(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:188: AND
			{
			DebugLocation(1, 188);
			mAND(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:192: OR
			{
			DebugLocation(1, 192);
			mOR(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:195: NOT
			{
			DebugLocation(1, 195);
			mNOT(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:199: ASSIGN
			{
			DebugLocation(1, 199);
			mASSIGN(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:206: COMMENT
			{
			DebugLocation(1, 206);
			mCOMMENT(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// /Users/zohaibrauf/Documents/Projects/Mono/ChimpyLang/ChimpyLang/lang/ChimpyLexer.g:1:214: NEWLINE
			{
			DebugLocation(1, 214);
			mNEWLINE(); 

			}
			break;

		}

	}


	#region DFA
	DFA12 dfa12;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12(this, SpecialStateTransition12);
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x1\xFFFF\x9\xD\x1\x2D\xB\xFFFF\x1\x2F\x1\x31\x1\x33\x9\xFFFF\x3\xD\x1"+
			"\x37\x7\xD\x7\xFFFF\x2\xD\x1\x42\x1\xFFFF\x1\xD\x1\x45\x1\xD\x1\x47\x2"+
			"\xD\x1\x4A\x3\xD\x2\xFFFF\x1\x4F\x1\xFFFF\x1\xD\x1\xFFFF\x1\x53\x1\x54"+
			"\x1\xFFFF\x1\xD\x1\x57\x1\x58\x3\xFFFF\x1\x5A\x4\xFFFF\x1\x5D\xB\xFFFF";
		private const string DFA12_eofS =
			"\x62\xFFFF";
		private const string DFA12_minS =
			"\x1\xA\x1\x61\x1\x65\x1\x66\x1\x6C\x1\x68\x1\x72\x1\x65\x1\x69\x1\x61"+
			"\x1\x30\xB\xFFFF\x3\x3D\x9\xFFFF\x1\x61\x1\x74\x1\x66\x1\x21\x1\x73\x1"+
			"\x64\x1\x69\x1\x75\x3\x6C\x7\xFFFF\x1\x73\x1\x63\x1\x21\x1\x0\x1\x65"+
			"\x1\x21\x1\x6C\x1\x21\x1\x65\x1\x66\x1\x21\x2\x73\x1\x68\x1\x0\x1\xFFFF"+
			"\x1\x21\x1\x0\x1\x65\x1\x0\x2\x21\x1\x0\x1\x65\x2\x21\x1\xFFFF\x1\x0"+
			"\x1\xFFFF\x1\x21\x1\xFFFF\x2\x0\x1\xFFFF\x1\x21\x2\x0\x1\xFFFF\x1\x0"+
			"\x2\xFFFF\x1\x0\x4\xFFFF";
		private const string DFA12_maxS =
			"\x1\x7C\x1\x6C\x1\x65\x1\x66\x1\x6E\x1\x68\x1\x72\x1\x65\x1\x69\x1\x61"+
			"\x1\x39\xB\xFFFF\x3\x3D\x9\xFFFF\x1\x61\x1\x74\x1\x66\x1\x7A\x1\x73\x1"+
			"\x64\x1\x69\x1\x79\x3\x6C\x7\xFFFF\x1\x73\x1\x63\x1\x7A\x1\x0\x1\x65"+
			"\x1\x7A\x1\x6C\x1\x7A\x1\x65\x1\x66\x1\x7A\x2\x73\x1\x68\x1\x0\x1\xFFFF"+
			"\x1\x7A\x1\x0\x1\x65\x1\x0\x2\x7A\x1\x0\x1\x65\x2\x7A\x1\xFFFF\x1\x0"+
			"\x1\xFFFF\x1\x7A\x1\xFFFF\x2\x0\x1\xFFFF\x1\x7A\x2\x0\x1\xFFFF\x1\x0"+
			"\x2\xFFFF\x1\x0\x4\xFFFF";
		private const string DFA12_acceptS =
			"\xB\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15"+
			"\x1\x16\x1\x17\x3\xFFFF\x1\x1D\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\x26\x1\x27\xB\xFFFF\x1\x1E\x1\x18\x1\x25\x1\x19\x1\x1B\x1\x1A"+
			"\x1\x1C\xF\xFFFF\x1\x3\xA\xFFFF\x1\x2\x1\xFFFF\x1\x8\x1\xFFFF\x1\x6\x2"+
			"\xFFFF\x1\xA\x3\xFFFF\x1\x4\x1\xFFFF\x1\xB\x1\x9\x1\xFFFF\x1\x1\x1\x7"+
			"\x1\x5\x1\xC";
		private const string DFA12_specialS =
			"\x37\xFFFF\x1\x2\xA\xFFFF\x1\x1\x2\xFFFF\x1\xA\x1\xFFFF\x1\x8\x2\xFFFF"+
			"\x1\x4\x4\xFFFF\x1\x3\x3\xFFFF\x1\x7\x1\x5\x2\xFFFF\x1\x0\x1\xB\x1\xFFFF"+
			"\x1\x9\x2\xFFFF\x1\x6\x4\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\x21\x2\xFFFF\x1\x21\x13\xFFFF\x1\x1F\x1\xC\x1\x20\x1\xFFFF\x1\x1C"+
				"\x1\x1D\x1\xFFFF\x1\x13\x1\x14\x1\x1A\x1\x19\x1\x12\x1\xA\x1\x11\x1"+
				"\x1B\xA\xB\x1\x10\x1\xF\x1\x17\x1\x16\x1\x18\x1\xFFFF\x1\x15\x1A\xE"+
				"\x4\xFFFF\x1\xD\x1\xFFFF\x2\xD\x1\x1\x1\x2\x1\x4\x1\x9\x2\xD\x1\x3\x4"+
				"\xD\x1\x8\x4\xD\x1\x7\x1\x6\x2\xD\x1\x5\x3\xD\x1\xFFFF\x1\x1E",
				"\x1\x23\xA\xFFFF\x1\x22",
				"\x1\x24",
				"\x1\x25",
				"\x1\x26\x1\xFFFF\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\xA\xB",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2E",
				"\x1\x30",
				"\x1\x32",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3C\x3\xFFFF\x1\x3B",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x3F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x40",
				"\x1\x41",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xFFFF",
				"\x1\x44",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\x46",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\x48",
				"\x1\x49",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\xFFFF",
				"",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xFFFF",
				"\x1\x51",
				"\x1\xFFFF",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xFFFF",
				"\x1\x56",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"",
				"\x1\xFFFF",
				"",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xD\xE\xFFFF\xA\xD\x5\xFFFF\x1\xD\x1\xFFFF\x1A\xD\x4\xFFFF\x1\xD"+
				"\x1\xFFFF\x1A\xD",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( CLASS | DEF | IF | ELSE | WHILE | TRY | CATCH | END | SELF | NIL | TRUE | FALSE | NUMBER | STRING | NAME | CONSTANT | SEMICOLON | COLON | DOT | COMMA | OPEN_PARENT | CLOSE_PARENT | AT | EQ | LE | GE | LT | GT | PLUS | MINUS | MUL | DIV | MOD | AND | OR | NOT | ASSIGN | COMMENT | NEWLINE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition12(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA12_87 = input.LA(1);


				int index12_87 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 94;}

				else if ((true)) {s = 13;}


				input.Seek(index12_87);
				if (s >= 0) return s;
				break;

			case 1:
				int LA12_66 = input.LA(1);


				int index12_66 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 78;}

				else if ((true)) {s = 13;}


				input.Seek(index12_66);
				if (s >= 0) return s;
				break;

			case 2:
				int LA12_55 = input.LA(1);


				int index12_55 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 67;}

				else if ((true)) {s = 13;}


				input.Seek(index12_55);
				if (s >= 0) return s;
				break;

			case 3:
				int LA12_79 = input.LA(1);


				int index12_79 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 89;}

				else if ((true)) {s = 13;}


				input.Seek(index12_79);
				if (s >= 0) return s;
				break;

			case 4:
				int LA12_74 = input.LA(1);


				int index12_74 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 85;}

				else if ((true)) {s = 13;}


				input.Seek(index12_74);
				if (s >= 0) return s;
				break;

			case 5:
				int LA12_84 = input.LA(1);


				int index12_84 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 92;}

				else if ((true)) {s = 13;}


				input.Seek(index12_84);
				if (s >= 0) return s;
				break;

			case 6:
				int LA12_93 = input.LA(1);


				int index12_93 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 97;}

				else if ((true)) {s = 13;}


				input.Seek(index12_93);
				if (s >= 0) return s;
				break;

			case 7:
				int LA12_83 = input.LA(1);


				int index12_83 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 91;}

				else if ((true)) {s = 13;}


				input.Seek(index12_83);
				if (s >= 0) return s;
				break;

			case 8:
				int LA12_71 = input.LA(1);


				int index12_71 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 82;}

				else if ((true)) {s = 13;}


				input.Seek(index12_71);
				if (s >= 0) return s;
				break;

			case 9:
				int LA12_90 = input.LA(1);


				int index12_90 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 96;}

				else if ((true)) {s = 13;}


				input.Seek(index12_90);
				if (s >= 0) return s;
				break;

			case 10:
				int LA12_69 = input.LA(1);


				int index12_69 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 80;}

				else if ((true)) {s = 13;}


				input.Seek(index12_69);
				if (s >= 0) return s;
				break;

			case 11:
				int LA12_88 = input.LA(1);


				int index12_88 = input.Index;
				input.Rewind();
				s = -1;
				if (((!methodMode))) {s = 95;}

				else if ((true)) {s = 13;}


				input.Seek(index12_88);
				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 12, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  ChimpyLang 
