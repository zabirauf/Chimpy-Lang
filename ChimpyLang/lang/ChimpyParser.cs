//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 ./ChimpyLang/lang/ChimpyParser.g 2012-09-12 21:26:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


  using ChimpyLang;
  //import java.util.ArrayList;

using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  ChimpyLang 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class ChimpyParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ASSIGN", "AT", "CATCH", "CLASS", "CLOSE_PARENT", "COLON", "COMMA", "COMMENT", "CONSTANT", "DEF", "DIGIT", "DIV", "DOT", "ELSE", "END", "EQ", "FALSE", "FLOAT", "GE", "GT", "ID_CHAR", "IF", "INTEGER", "LE", "LETTER", "LOWER", "LT", "MINUS", "MOD", "MUL", "NAME", "NEWLINE", "NIL", "NOT", "NUMBER", "OPEN_PARENT", "OR", "PLUS", "SELF", "SEMICOLON", "SPACE", "STRING", "TRUE", "TRY", "UPPER", "WHILE"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ASSIGN=5;
	public const int AT=6;
	public const int CATCH=7;
	public const int CLASS=8;
	public const int CLOSE_PARENT=9;
	public const int COLON=10;
	public const int COMMA=11;
	public const int COMMENT=12;
	public const int CONSTANT=13;
	public const int DEF=14;
	public const int DIGIT=15;
	public const int DIV=16;
	public const int DOT=17;
	public const int ELSE=18;
	public const int END=19;
	public const int EQ=20;
	public const int FALSE=21;
	public const int FLOAT=22;
	public const int GE=23;
	public const int GT=24;
	public const int ID_CHAR=25;
	public const int IF=26;
	public const int INTEGER=27;
	public const int LE=28;
	public const int LETTER=29;
	public const int LOWER=30;
	public const int LT=31;
	public const int MINUS=32;
	public const int MOD=33;
	public const int MUL=34;
	public const int NAME=35;
	public const int NEWLINE=36;
	public const int NIL=37;
	public const int NOT=38;
	public const int NUMBER=39;
	public const int OPEN_PARENT=40;
	public const int OR=41;
	public const int PLUS=42;
	public const int SELF=43;
	public const int SEMICOLON=44;
	public const int SPACE=45;
	public const int STRING=46;
	public const int TRUE=47;
	public const int TRY=48;
	public const int UPPER=49;
	public const int WHILE=50;

	public ChimpyParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ChimpyParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ChimpyParser.tokenNames; } }
	public override string GrammarFileName { get { return "./ChimpyLang/lang/ChimpyParser.g"; } }


	  /**
	    Run the parsing process and return the root node of the AST.
	  */
	  public Node parse() {
	    root_return result = root();
	    if (result == null) return null;
	    return result.nodes;
	  }
	  
	  // Override to throw exceptions on parse error.
	  public override void ReportError(RecognitionException e) {
	    throw new RuntimeException(e);
	  }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class root_return : AstParserRuleReturnScope<object, IToken>
	{
		public Nodes nodes;
		public root_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_root();
	partial void LeaveRule_root();
	// $ANTLR start "root"
	// ./ChimpyLang/lang/ChimpyParser.g:56:1: root returns [Nodes nodes] : ( terminator )? ( expressions )? EOF !;
	[GrammarRule("root")]
	private ChimpyParser.root_return root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		ChimpyParser.root_return retval = new ChimpyParser.root_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<object, IToken> terminator1 = default(AstParserRuleReturnScope<object, IToken>);
		ChimpyParser.expressions_return expressions2 = default(ChimpyParser.expressions_return);

		object EOF3_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(56, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:56:27: ( ( terminator )? ( expressions )? EOF !)
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:57:5: ( terminator )? ( expressions )? EOF !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(57, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:57:5: ( terminator )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==NEWLINE||LA1_1==SEMICOLON))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:57:5: terminator
				{
				DebugLocation(57, 5);
				PushFollow(Follow._terminator_in_root91);
				terminator1=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(57, 17);
			// ./ChimpyLang/lang/ChimpyParser.g:57:17: ( expressions )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==AT||LA2_1==CLASS||(LA2_1>=CONSTANT && LA2_1<=DEF)||(LA2_1>=FALSE && LA2_1<=FLOAT)||(LA2_1>=IF && LA2_1<=INTEGER)||LA2_1==NAME||(LA2_1>=NIL && LA2_1<=NOT)||LA2_1==OPEN_PARENT||LA2_1==SELF||(LA2_1>=STRING && LA2_1<=TRY)||LA2_1==WHILE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:57:17: expressions
				{
				DebugLocation(57, 17);
				PushFollow(Follow._expressions_in_root94);
				expressions2=expressions();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressions2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(57, 33);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root97); if (state.failed) return retval;
			DebugLocation(57, 35);
			if (state.backtracking == 0)
			{
				 retval.nodes = (expressions2!=null?expressions2.nodes:default(Nodes)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(58, 2);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	private sealed partial class expressions_return : AstParserRuleReturnScope<object, IToken>
	{
		public Nodes nodes;
		public expressions_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_expressions();
	partial void LeaveRule_expressions();
	// $ANTLR start "expressions"
	// ./ChimpyLang/lang/ChimpyParser.g:61:1: expressions returns [Nodes nodes] :head= expression ( terminator tail= expression )* ( terminator )? ;
	[GrammarRule("expressions")]
	private ChimpyParser.expressions_return expressions()
	{
		EnterRule_expressions();
		EnterRule("expressions", 2);
		TraceIn("expressions", 2);
		ChimpyParser.expressions_return retval = new ChimpyParser.expressions_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ChimpyParser.expression_return head = default(ChimpyParser.expression_return);
		ChimpyParser.expression_return tail = default(ChimpyParser.expression_return);
		AstParserRuleReturnScope<object, IToken> terminator4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> terminator5 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expressions");
		DebugLocation(61, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:61:34: (head= expression ( terminator tail= expression )* ( terminator )? )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:62:23: head= expression ( terminator tail= expression )* ( terminator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 23);
			if (state.backtracking == 0)
			{
				 retval.nodes = new Nodes(); 
			}
			DebugLocation(63, 9);
			PushFollow(Follow._expression_in_expressions145);
			head=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
			DebugLocation(63, 23);
			if (state.backtracking == 0)
			{
				 retval.nodes.Add((head!=null?head.node:default(Node))); 
			}
			DebugLocation(64, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:64:5: ( terminator tail= expression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:64:6: terminator tail= expression
					{
					DebugLocation(64, 6);
					PushFollow(Follow._terminator_in_expressions156);
					terminator4=terminator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, terminator4.Tree);
					DebugLocation(65, 10);
					PushFollow(Follow._expression_in_expressions165);
					tail=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
					DebugLocation(65, 23);
					if (state.backtracking == 0)
					{
						 retval.nodes.Add((tail!=null?tail.node:default(Node))); 
					}

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(67, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:67:5: ( terminator )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==NEWLINE||LA4_1==SEMICOLON))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:67:5: terminator
				{
				DebugLocation(67, 5);
				PushFollow(Follow._terminator_in_expressions181);
				terminator5=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator5.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("expressions", 2);
			LeaveRule("expressions", 2);
			LeaveRule_expressions();
		}
		DebugLocation(68, 2);
		} finally { DebugExitRule(GrammarFileName, "expressions"); }
		return retval;

	}
	// $ANTLR end "expressions"

	private sealed partial class expression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public expression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// ./ChimpyLang/lang/ChimpyParser.g:71:1: expression returns [Node node] : assignExpression ;
	[GrammarRule("expression")]
	private ChimpyParser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 3);
		TraceIn("expression", 3);
		ChimpyParser.expression_return retval = new ChimpyParser.expression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ChimpyParser.assignExpression_return assignExpression6 = default(ChimpyParser.assignExpression_return);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(71, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:71:31: ( assignExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:72:5: assignExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 5);
			PushFollow(Follow._assignExpression_in_expression201);
			assignExpression6=assignExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignExpression6.Tree);
			DebugLocation(72, 27);
			if (state.backtracking == 0)
			{
				 retval.node = (assignExpression6!=null?assignExpression6.node:default(Node)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("expression", 3);
			LeaveRule("expression", 3);
			LeaveRule_expression();
		}
		DebugLocation(73, 2);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_terminator();
	partial void LeaveRule_terminator();
	// $ANTLR start "terminator"
	// ./ChimpyLang/lang/ChimpyParser.g:76:1: terminator : ( NEWLINE | SEMICOLON )+ ;
	[GrammarRule("terminator")]
	private AstParserRuleReturnScope<object, IToken> terminator()
	{
		EnterRule_terminator();
		EnterRule("terminator", 4);
		TraceIn("terminator", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set7 = default(IToken);

		object set7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "terminator");
		DebugLocation(76, 34);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:76:11: ( ( NEWLINE | SEMICOLON )+ )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:76:13: ( NEWLINE | SEMICOLON )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 13);
			// ./ChimpyLang/lang/ChimpyParser.g:76:13: ( NEWLINE | SEMICOLON )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==NEWLINE||LA5_1==SEMICOLON))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:
					{
					DebugLocation(76, 13);

					set7=(IToken)input.LT(1);
					if (input.LA(1)==NEWLINE||input.LA(1)==SEMICOLON)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set7));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("terminator", 4);
			LeaveRule("terminator", 4);
			LeaveRule_terminator();
		}
		DebugLocation(76, 34);
		} finally { DebugExitRule(GrammarFileName, "terminator"); }
		return retval;

	}
	// $ANTLR end "terminator"

	private sealed partial class assignExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public assignExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_assignExpression();
	partial void LeaveRule_assignExpression();
	// $ANTLR start "assignExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:82:1: assignExpression returns [Node node] : ( assign |e= orExpression );
	[GrammarRule("assignExpression")]
	private ChimpyParser.assignExpression_return assignExpression()
	{
		EnterRule_assignExpression();
		EnterRule("assignExpression", 5);
		TraceIn("assignExpression", 5);
		ChimpyParser.assignExpression_return retval = new ChimpyParser.assignExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		ChimpyParser.orExpression_return e = default(ChimpyParser.orExpression_return);
		ChimpyParser.assign_return assign8 = default(ChimpyParser.assign_return);

		try { DebugEnterRule(GrammarFileName, "assignExpression");
		DebugLocation(82, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:82:37: ( assign |e= orExpression )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case NAME:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==ASSIGN))
				{
					alt6 = 1;
				}
				else if ((LA6_2==EOF||LA6_2==AND||LA6_2==CATCH||LA6_2==CLOSE_PARENT||LA6_2==COMMA||(LA6_2>=DIV && LA6_2<=EQ)||(LA6_2>=GE && LA6_2<=GT)||LA6_2==LE||(LA6_2>=LT && LA6_2<=MUL)||LA6_2==NEWLINE||(LA6_2>=OPEN_PARENT && LA6_2<=PLUS)||LA6_2==SEMICOLON))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==ASSIGN))
				{
					alt6 = 1;
				}
				else if ((LA6_2==EOF||LA6_2==AND||LA6_2==CATCH||LA6_2==CLOSE_PARENT||LA6_2==COMMA||(LA6_2>=DIV && LA6_2<=EQ)||(LA6_2>=GE && LA6_2<=GT)||LA6_2==LE||(LA6_2>=LT && LA6_2<=MUL)||LA6_2==NEWLINE||(LA6_2>=OR && LA6_2<=PLUS)||LA6_2==SEMICOLON))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==NAME))
				{
					int LA6_3 = input.LA(3);

					if ((LA6_3==ASSIGN))
					{
						alt6 = 1;
					}
					else if ((LA6_3==EOF||LA6_3==AND||LA6_3==CATCH||LA6_3==CLOSE_PARENT||LA6_3==COMMA||(LA6_3>=DIV && LA6_3<=EQ)||(LA6_3>=GE && LA6_3<=GT)||LA6_3==LE||(LA6_3>=LT && LA6_3<=MUL)||LA6_3==NEWLINE||(LA6_3>=OR && LA6_3<=PLUS)||LA6_3==SEMICOLON))
					{
						alt6 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 6, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case DEF:
			case FALSE:
			case FLOAT:
			case IF:
			case INTEGER:
			case NIL:
			case NOT:
			case OPEN_PARENT:
			case SELF:
			case STRING:
			case TRUE:
			case TRY:
			case WHILE:
				{
				alt6 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:83:5: assign
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 5);
				PushFollow(Follow._assign_in_assignExpression245);
				assign8=assign();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assign8.Tree);
				DebugLocation(83, 27);
				if (state.backtracking == 0)
				{
					 retval.node = (assign8!=null?assign8.node:default(Node)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:84:5: e= orExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(84, 6);
				PushFollow(Follow._orExpression_in_assignExpression270);
				e=orExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(84, 27);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("assignExpression", 5);
			LeaveRule("assignExpression", 5);
			LeaveRule_assignExpression();
		}
		DebugLocation(85, 2);
		} finally { DebugExitRule(GrammarFileName, "assignExpression"); }
		return retval;

	}
	// $ANTLR end "assignExpression"

	private sealed partial class orExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public orExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_orExpression();
	partial void LeaveRule_orExpression();
	// $ANTLR start "orExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:87:1: orExpression returns [Node node] : (receiver= andExpression OR arg= orExpression |e= andExpression );
	[GrammarRule("orExpression")]
	private ChimpyParser.orExpression_return orExpression()
	{
		EnterRule_orExpression();
		EnterRule("orExpression", 6);
		TraceIn("orExpression", 6);
		ChimpyParser.orExpression_return retval = new ChimpyParser.orExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR9 = default(IToken);
		ChimpyParser.andExpression_return receiver = default(ChimpyParser.andExpression_return);
		ChimpyParser.orExpression_return arg = default(ChimpyParser.orExpression_return);
		ChimpyParser.andExpression_return e = default(ChimpyParser.andExpression_return);

		object OR9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orExpression");
		DebugLocation(87, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:87:33: (receiver= andExpression OR arg= orExpression |e= andExpression )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEF:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRY:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_ChimpyParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:88:5: receiver= andExpression OR arg= orExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(88, 13);
				PushFollow(Follow._andExpression_in_orExpression299);
				receiver=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(89, 7);
				OR9=(IToken)Match(input,OR,Follow._OR_in_orExpression307); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OR9_tree = (object)adaptor.Create(OR9);
				adaptor.AddChild(root_0, OR9_tree);
				}
				DebugLocation(89, 13);
				PushFollow(Follow._orExpression_in_orExpression311);
				arg=orExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(89, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new OrNode((receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:90:5: e= andExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(90, 6);
				PushFollow(Follow._andExpression_in_orExpression327);
				e=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(90, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("orExpression", 6);
			LeaveRule("orExpression", 6);
			LeaveRule_orExpression();
		}
		DebugLocation(91, 2);
		} finally { DebugExitRule(GrammarFileName, "orExpression"); }
		return retval;

	}
	// $ANTLR end "orExpression"

	private sealed partial class andExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public andExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:93:1: andExpression returns [Node node] : (receiver= relationalExpression AND arg= andExpression |e= relationalExpression );
	[GrammarRule("andExpression")]
	private ChimpyParser.andExpression_return andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 7);
		TraceIn("andExpression", 7);
		ChimpyParser.andExpression_return retval = new ChimpyParser.andExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND10 = default(IToken);
		ChimpyParser.relationalExpression_return receiver = default(ChimpyParser.relationalExpression_return);
		ChimpyParser.andExpression_return arg = default(ChimpyParser.andExpression_return);
		ChimpyParser.relationalExpression_return e = default(ChimpyParser.relationalExpression_return);

		object AND10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(93, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:93:34: (receiver= relationalExpression AND arg= andExpression |e= relationalExpression )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEF:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRY:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_ChimpyParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:94:5: receiver= relationalExpression AND arg= andExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(94, 13);
				PushFollow(Follow._relationalExpression_in_andExpression361);
				receiver=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(95, 7);
				AND10=(IToken)Match(input,AND,Follow._AND_in_andExpression369); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AND10_tree = (object)adaptor.Create(AND10);
				adaptor.AddChild(root_0, AND10_tree);
				}
				DebugLocation(95, 14);
				PushFollow(Follow._andExpression_in_andExpression373);
				arg=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(95, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new AndNode((receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:96:5: e= relationalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(96, 6);
				PushFollow(Follow._relationalExpression_in_andExpression387);
				e=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(96, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("andExpression", 7);
			LeaveRule("andExpression", 7);
			LeaveRule_andExpression();
		}
		DebugLocation(97, 2);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	private sealed partial class relationalExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public relationalExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:99:1: relationalExpression returns [Node node] : (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression |e= additiveExpression );
	[GrammarRule("relationalExpression")]
	private ChimpyParser.relationalExpression_return relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 8);
		TraceIn("relationalExpression", 8);
		ChimpyParser.relationalExpression_return retval = new ChimpyParser.relationalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		ChimpyParser.additiveExpression_return receiver = default(ChimpyParser.additiveExpression_return);
		ChimpyParser.relationalExpression_return arg = default(ChimpyParser.relationalExpression_return);
		ChimpyParser.additiveExpression_return e = default(ChimpyParser.additiveExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(99, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:99:41: (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression |e= additiveExpression )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEF:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRY:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_ChimpyParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:100:5: receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(100, 13);
				PushFollow(Follow._additiveExpression_in_relationalExpression414);
				receiver=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(101, 9);

				op=(IToken)input.LT(1);
				if (input.LA(1)==EQ||(input.LA(1)>=GE && input.LA(1)<=GT)||input.LA(1)==LE||input.LA(1)==LT)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(102, 10);
				PushFollow(Follow._relationalExpression_in_relationalExpression444);
				arg=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(102, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:103:5: e= additiveExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(103, 6);
				PushFollow(Follow._additiveExpression_in_relationalExpression455);
				e=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(103, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("relationalExpression", 8);
			LeaveRule("relationalExpression", 8);
			LeaveRule_relationalExpression();
		}
		DebugLocation(104, 2);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	private sealed partial class additiveExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public additiveExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:106:1: additiveExpression returns [Node node] : (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression |e= multiplicativeExpression );
	[GrammarRule("additiveExpression")]
	private ChimpyParser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 9);
		TraceIn("additiveExpression", 9);
		ChimpyParser.additiveExpression_return retval = new ChimpyParser.additiveExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		ChimpyParser.multiplicativeExpression_return receiver = default(ChimpyParser.multiplicativeExpression_return);
		ChimpyParser.additiveExpression_return arg = default(ChimpyParser.additiveExpression_return);
		ChimpyParser.multiplicativeExpression_return e = default(ChimpyParser.multiplicativeExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(106, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:106:39: (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression |e= multiplicativeExpression )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEF:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRY:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_ChimpyParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:107:5: receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 13);
				PushFollow(Follow._multiplicativeExpression_in_additiveExpression484);
				receiver=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(108, 9);

				op=(IToken)input.LT(1);
				if (input.LA(1)==MINUS||input.LA(1)==PLUS)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(108, 26);
				PushFollow(Follow._additiveExpression_in_additiveExpression502);
				arg=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(108, 47);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:109:5: e= multiplicativeExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 6);
				PushFollow(Follow._multiplicativeExpression_in_additiveExpression513);
				e=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(109, 47);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("additiveExpression", 9);
			LeaveRule("additiveExpression", 9);
			LeaveRule_additiveExpression();
		}
		DebugLocation(110, 2);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class multiplicativeExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public multiplicativeExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:112:1: multiplicativeExpression returns [Node node] : (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression |e= unaryExpression );
	[GrammarRule("multiplicativeExpression")]
	private ChimpyParser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 10);
		TraceIn("multiplicativeExpression", 10);
		ChimpyParser.multiplicativeExpression_return retval = new ChimpyParser.multiplicativeExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		ChimpyParser.unaryExpression_return receiver = default(ChimpyParser.unaryExpression_return);
		ChimpyParser.multiplicativeExpression_return arg = default(ChimpyParser.multiplicativeExpression_return);
		ChimpyParser.unaryExpression_return e = default(ChimpyParser.unaryExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(112, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:112:45: (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression |e= unaryExpression )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DEF:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRY:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_ChimpyParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:113:5: receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 13);
				PushFollow(Follow._unaryExpression_in_multiplicativeExpression550);
				receiver=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(114, 9);

				op=(IToken)input.LT(1);
				if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(114, 27);
				PushFollow(Follow._multiplicativeExpression_in_multiplicativeExpression570);
				arg=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(114, 54);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:115:5: e= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 6);
				PushFollow(Follow._unaryExpression_in_multiplicativeExpression581);
				e=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(115, 54);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("multiplicativeExpression", 10);
			LeaveRule("multiplicativeExpression", 10);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(116, 2);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class unaryExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public unaryExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:118:1: unaryExpression returns [Node node] : ( NOT receiver= unaryExpression |e= primaryExpression );
	[GrammarRule("unaryExpression")]
	private ChimpyParser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 11);
		TraceIn("unaryExpression", 11);
		ChimpyParser.unaryExpression_return retval = new ChimpyParser.unaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT11 = default(IToken);
		ChimpyParser.unaryExpression_return receiver = default(ChimpyParser.unaryExpression_return);
		ChimpyParser.primaryExpression_return e = default(ChimpyParser.primaryExpression_return);

		object NOT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(118, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:118:36: ( NOT receiver= unaryExpression |e= primaryExpression )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==NOT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==AT||LA12_1==CLASS||(LA12_1>=CONSTANT && LA12_1<=DEF)||(LA12_1>=FALSE && LA12_1<=FLOAT)||(LA12_1>=IF && LA12_1<=INTEGER)||LA12_1==NAME||LA12_1==NIL||LA12_1==OPEN_PARENT||LA12_1==SELF||(LA12_1>=STRING && LA12_1<=TRY)||LA12_1==WHILE))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:119:5: NOT receiver= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 5);
				NOT11=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression632); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NOT11_tree = (object)adaptor.Create(NOT11);
				adaptor.AddChild(root_0, NOT11_tree);
				}
				DebugLocation(119, 17);
				PushFollow(Follow._unaryExpression_in_unaryExpression636);
				receiver=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(119, 40);
				if (state.backtracking == 0)
				{
					 retval.node = new NotNode((receiver!=null?receiver.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:120:5: e= primaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(120, 6);
				PushFollow(Follow._primaryExpression_in_unaryExpression652);
				e=primaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(120, 40);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("unaryExpression", 11);
			LeaveRule("unaryExpression", 11);
			LeaveRule_unaryExpression();
		}
		DebugLocation(121, 2);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class primaryExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public primaryExpression_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// ./ChimpyLang/lang/ChimpyParser.g:124:1: primaryExpression returns [Node node] : ( literal | call | methodDefinition | classDefinition | ifBlock | whileBlock | tryBlock | OPEN_PARENT expression CLOSE_PARENT );
	[GrammarRule("primaryExpression")]
	private ChimpyParser.primaryExpression_return primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 12);
		TraceIn("primaryExpression", 12);
		ChimpyParser.primaryExpression_return retval = new ChimpyParser.primaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OPEN_PARENT19 = default(IToken);
		IToken CLOSE_PARENT21 = default(IToken);
		ChimpyParser.literal_return literal12 = default(ChimpyParser.literal_return);
		ChimpyParser.call_return call13 = default(ChimpyParser.call_return);
		ChimpyParser.methodDefinition_return methodDefinition14 = default(ChimpyParser.methodDefinition_return);
		ChimpyParser.classDefinition_return classDefinition15 = default(ChimpyParser.classDefinition_return);
		ChimpyParser.ifBlock_return ifBlock16 = default(ChimpyParser.ifBlock_return);
		ChimpyParser.whileBlock_return whileBlock17 = default(ChimpyParser.whileBlock_return);
		ChimpyParser.tryBlock_return tryBlock18 = default(ChimpyParser.tryBlock_return);
		ChimpyParser.expression_return expression20 = default(ChimpyParser.expression_return);

		object OPEN_PARENT19_tree = default(object);
		object CLOSE_PARENT21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(124, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:124:38: ( literal | call | methodDefinition | classDefinition | ifBlock | whileBlock | tryBlock | OPEN_PARENT expression CLOSE_PARENT )
			int alt13=8;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case STRING:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case AT:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==NAME))
				{
					int LA13_3 = input.LA(3);

					if ((LA13_3==EOF||LA13_3==AND||LA13_3==CATCH||LA13_3==CLOSE_PARENT||LA13_3==COMMA||LA13_3==DIV||(LA13_3>=ELSE && LA13_3<=EQ)||(LA13_3>=GE && LA13_3<=GT)||LA13_3==LE||(LA13_3>=LT && LA13_3<=MUL)||LA13_3==NEWLINE||(LA13_3>=OR && LA13_3<=PLUS)||LA13_3==SEMICOLON))
					{
						alt13 = 1;
					}
					else if ((LA13_3==DOT))
					{
						alt13 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 13, 18, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==AND||LA13_2==CATCH||LA13_2==CLOSE_PARENT||LA13_2==COMMA||LA13_2==DIV||(LA13_2>=ELSE && LA13_2<=EQ)||(LA13_2>=GE && LA13_2<=GT)||LA13_2==LE||(LA13_2>=LT && LA13_2<=MUL)||LA13_2==NEWLINE||(LA13_2>=OR && LA13_2<=PLUS)||LA13_2==SEMICOLON))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				alt13 = 2;
				}
				break;
			case DEF:
				{
				alt13 = 3;
				}
				break;
			case CLASS:
				{
				alt13 = 4;
				}
				break;
			case IF:
				{
				alt13 = 5;
				}
				break;
			case WHILE:
				{
				alt13 = 6;
				}
				break;
			case TRY:
				{
				alt13 = 7;
				}
				break;
			case OPEN_PARENT:
				{
				alt13 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:125:5: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 5);
				PushFollow(Follow._literal_in_primaryExpression688);
				literal12=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal12.Tree);
				DebugLocation(125, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (literal12!=null?literal12.node:default(Node)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:126:5: call
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 5);
				PushFollow(Follow._call_in_primaryExpression706);
				call13=call();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, call13.Tree);
				DebugLocation(126, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (call13!=null?call13.node:default(Node)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./ChimpyLang/lang/ChimpyParser.g:127:5: methodDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 5);
				PushFollow(Follow._methodDefinition_in_primaryExpression727);
				methodDefinition14=methodDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, methodDefinition14.Tree);
				DebugLocation(127, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (methodDefinition14!=null?methodDefinition14.node:default(MethodDefinitionNode)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./ChimpyLang/lang/ChimpyParser.g:128:5: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 5);
				PushFollow(Follow._classDefinition_in_primaryExpression736);
				classDefinition15=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition15.Tree);
				DebugLocation(128, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (classDefinition15!=null?classDefinition15.node:default(ClassDefinitionNode)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./ChimpyLang/lang/ChimpyParser.g:129:5: ifBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 5);
				PushFollow(Follow._ifBlock_in_primaryExpression746);
				ifBlock16=ifBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifBlock16.Tree);
				DebugLocation(129, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (ifBlock16!=null?ifBlock16.node:default(IfNode)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./ChimpyLang/lang/ChimpyParser.g:130:5: whileBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 5);
				PushFollow(Follow._whileBlock_in_primaryExpression764);
				whileBlock17=whileBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileBlock17.Tree);
				DebugLocation(130, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (whileBlock17!=null?whileBlock17.node:default(WhileNode)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./ChimpyLang/lang/ChimpyParser.g:131:5: tryBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 5);
				PushFollow(Follow._tryBlock_in_primaryExpression779);
				tryBlock18=tryBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryBlock18.Tree);
				DebugLocation(131, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (tryBlock18!=null?tryBlock18.node:default(TryNode)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./ChimpyLang/lang/ChimpyParser.g:132:5: OPEN_PARENT expression CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 5);
				OPEN_PARENT19=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_primaryExpression796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT19_tree = (object)adaptor.Create(OPEN_PARENT19);
				adaptor.AddChild(root_0, OPEN_PARENT19_tree);
				}
				DebugLocation(133, 7);
				PushFollow(Follow._expression_in_primaryExpression804);
				expression20=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression20.Tree);
				DebugLocation(134, 5);
				CLOSE_PARENT21=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_primaryExpression810); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT21_tree = (object)adaptor.Create(CLOSE_PARENT21);
				adaptor.AddChild(root_0, CLOSE_PARENT21_tree);
				}
				DebugLocation(134, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (expression20!=null?expression20.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("primaryExpression", 12);
			LeaveRule("primaryExpression", 12);
			LeaveRule_primaryExpression();
		}
		DebugLocation(135, 2);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	private sealed partial class literal_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public literal_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// ./ChimpyLang/lang/ChimpyParser.g:138:1: literal returns [Node node] : ( STRING | INTEGER | FLOAT | NIL | TRUE | FALSE | constant | instanceVariable | self );
	[GrammarRule("literal")]
	private ChimpyParser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 13);
		TraceIn("literal", 13);
		ChimpyParser.literal_return retval = new ChimpyParser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken STRING22 = default(IToken);
		IToken INTEGER23 = default(IToken);
		IToken FLOAT24 = default(IToken);
		IToken NIL25 = default(IToken);
		IToken TRUE26 = default(IToken);
		IToken FALSE27 = default(IToken);
		ChimpyParser.constant_return constant28 = default(ChimpyParser.constant_return);
		ChimpyParser.instanceVariable_return instanceVariable29 = default(ChimpyParser.instanceVariable_return);
		ChimpyParser.self_return self30 = default(ChimpyParser.self_return);

		object STRING22_tree = default(object);
		object INTEGER23_tree = default(object);
		object FLOAT24_tree = default(object);
		object NIL25_tree = default(object);
		object TRUE26_tree = default(object);
		object FALSE27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(138, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:138:28: ( STRING | INTEGER | FLOAT | NIL | TRUE | FALSE | constant | instanceVariable | self )
			int alt14=9;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt14 = 1;
				}
				break;
			case INTEGER:
				{
				alt14 = 2;
				}
				break;
			case FLOAT:
				{
				alt14 = 3;
				}
				break;
			case NIL:
				{
				alt14 = 4;
				}
				break;
			case TRUE:
				{
				alt14 = 5;
				}
				break;
			case FALSE:
				{
				alt14 = 6;
				}
				break;
			case CONSTANT:
				{
				alt14 = 7;
				}
				break;
			case AT:
				{
				alt14 = 8;
				}
				break;
			case SELF:
				{
				alt14 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:139:5: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 5);
				STRING22=(IToken)Match(input,STRING,Follow._STRING_in_literal836); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING22_tree = (object)adaptor.Create(STRING22);
				adaptor.AddChild(root_0, STRING22_tree);
				}
				DebugLocation(139, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject((STRING22!=null?STRING22.Text:null).Substring(1, (STRING22!=null?STRING22.Text:null).Length - 1))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:140:5: INTEGER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 5);
				INTEGER23=(IToken)Match(input,INTEGER,Follow._INTEGER_in_literal855); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INTEGER23_tree = (object)adaptor.Create(INTEGER23);
				adaptor.AddChild(root_0, INTEGER23_tree);
				}
				DebugLocation(140, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject(Int32.Parse((INTEGER23!=null?INTEGER23.Text:null)))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./ChimpyLang/lang/ChimpyParser.g:141:5: FLOAT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 5);
				FLOAT24=(IToken)Match(input,FLOAT,Follow._FLOAT_in_literal873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FLOAT24_tree = (object)adaptor.Create(FLOAT24);
				adaptor.AddChild(root_0, FLOAT24_tree);
				}
				DebugLocation(141, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject(float.Parse((FLOAT24!=null?FLOAT24.Text:null)))); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./ChimpyLang/lang/ChimpyParser.g:142:5: NIL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 5);
				NIL25=(IToken)Match(input,NIL,Follow._NIL_in_literal893); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NIL25_tree = (object)adaptor.Create(NIL25);
				adaptor.AddChild(root_0, NIL25_tree);
				}
				DebugLocation(142, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(ChimpyRuntime.Nil); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./ChimpyLang/lang/ChimpyParser.g:143:5: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 5);
				TRUE26=(IToken)Match(input,TRUE,Follow._TRUE_in_literal915); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE26_tree = (object)adaptor.Create(TRUE26);
				adaptor.AddChild(root_0, TRUE26_tree);
				}
				DebugLocation(143, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(ChimpyRuntime.True); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./ChimpyLang/lang/ChimpyParser.g:144:5: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 5);
				FALSE27=(IToken)Match(input,FALSE,Follow._FALSE_in_literal936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE27_tree = (object)adaptor.Create(FALSE27);
				adaptor.AddChild(root_0, FALSE27_tree);
				}
				DebugLocation(144, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(ChimpyRuntime.False); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./ChimpyLang/lang/ChimpyParser.g:145:5: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(145, 5);
				PushFollow(Follow._constant_in_literal956);
				constant28=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant28.Tree);
				DebugLocation(145, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (constant28!=null?constant28.node:default(ConstantNode)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./ChimpyLang/lang/ChimpyParser.g:146:5: instanceVariable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 5);
				PushFollow(Follow._instanceVariable_in_literal973);
				instanceVariable29=instanceVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceVariable29.Tree);
				DebugLocation(146, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (instanceVariable29!=null?instanceVariable29.node:default(InstanceVariableNode)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ./ChimpyLang/lang/ChimpyParser.g:147:5: self
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 5);
				PushFollow(Follow._self_in_literal982);
				self30=self();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, self30.Tree);
				DebugLocation(147, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (self30!=null?self30.node:default(SelfNode)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("literal", 13);
			LeaveRule("literal", 13);
			LeaveRule_literal();
		}
		DebugLocation(148, 2);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class self_return : AstParserRuleReturnScope<object, IToken>
	{
		public SelfNode node;
		public self_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_self();
	partial void LeaveRule_self();
	// $ANTLR start "self"
	// ./ChimpyLang/lang/ChimpyParser.g:151:1: self returns [SelfNode node] : SELF ;
	[GrammarRule("self")]
	private ChimpyParser.self_return self()
	{
		EnterRule_self();
		EnterRule("self", 14);
		TraceIn("self", 14);
		ChimpyParser.self_return retval = new ChimpyParser.self_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELF31 = default(IToken);

		object SELF31_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "self");
		DebugLocation(151, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:151:29: ( SELF )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:152:5: SELF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(152, 5);
			SELF31=(IToken)Match(input,SELF,Follow._SELF_in_self1016); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SELF31_tree = (object)adaptor.Create(SELF31);
			adaptor.AddChild(root_0, SELF31_tree);
			}
			DebugLocation(152, 23);
			if (state.backtracking == 0)
			{
				 retval.node = new SelfNode(); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("self", 14);
			LeaveRule("self", 14);
			LeaveRule_self();
		}
		DebugLocation(153, 2);
		} finally { DebugExitRule(GrammarFileName, "self"); }
		return retval;

	}
	// $ANTLR end "self"

	private sealed partial class instanceVariable_return : AstParserRuleReturnScope<object, IToken>
	{
		public InstanceVariableNode node;
		public instanceVariable_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_instanceVariable();
	partial void LeaveRule_instanceVariable();
	// $ANTLR start "instanceVariable"
	// ./ChimpyLang/lang/ChimpyParser.g:156:1: instanceVariable returns [InstanceVariableNode node] : AT NAME ;
	[GrammarRule("instanceVariable")]
	private ChimpyParser.instanceVariable_return instanceVariable()
	{
		EnterRule_instanceVariable();
		EnterRule("instanceVariable", 15);
		TraceIn("instanceVariable", 15);
		ChimpyParser.instanceVariable_return retval = new ChimpyParser.instanceVariable_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AT32 = default(IToken);
		IToken NAME33 = default(IToken);

		object AT32_tree = default(object);
		object NAME33_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceVariable");
		DebugLocation(156, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:156:53: ( AT NAME )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:157:5: AT NAME
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(157, 5);
			AT32=(IToken)Match(input,AT,Follow._AT_in_instanceVariable1050); if (state.failed) return retval;
			if (state.backtracking == 0) {
			AT32_tree = (object)adaptor.Create(AT32);
			adaptor.AddChild(root_0, AT32_tree);
			}
			DebugLocation(157, 8);
			NAME33=(IToken)Match(input,NAME,Follow._NAME_in_instanceVariable1052); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME33_tree = (object)adaptor.Create(NAME33);
			adaptor.AddChild(root_0, NAME33_tree);
			}
			DebugLocation(157, 23);
			if (state.backtracking == 0)
			{
				 retval.node = new InstanceVariableNode((NAME33!=null?NAME33.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("instanceVariable", 15);
			LeaveRule("instanceVariable", 15);
			LeaveRule_instanceVariable();
		}
		DebugLocation(158, 2);
		} finally { DebugExitRule(GrammarFileName, "instanceVariable"); }
		return retval;

	}
	// $ANTLR end "instanceVariable"

	private sealed partial class call_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public call_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_call();
	partial void LeaveRule_call();
	// $ANTLR start "call"
	// ./ChimpyLang/lang/ChimpyParser.g:161:1: call returns [Node node] : ( literal DOT )? (head= message DOT )* tail= message ;
	[GrammarRule("call")]
	private ChimpyParser.call_return call()
	{
		EnterRule_call();
		EnterRule("call", 16);
		TraceIn("call", 16);
		ChimpyParser.call_return retval = new ChimpyParser.call_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOT35 = default(IToken);
		IToken DOT36 = default(IToken);
		ChimpyParser.message_return head = default(ChimpyParser.message_return);
		ChimpyParser.message_return tail = default(ChimpyParser.message_return);
		ChimpyParser.literal_return literal34 = default(ChimpyParser.literal_return);

		object DOT35_tree = default(object);
		object DOT36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "call");
		DebugLocation(161, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:161:25: ( ( literal DOT )? (head= message DOT )* tail= message )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:162:5: ( literal DOT )? (head= message DOT )* tail= message
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(162, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:162:5: ( literal DOT )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==AT||LA15_1==CONSTANT||(LA15_1>=FALSE && LA15_1<=FLOAT)||LA15_1==INTEGER||LA15_1==NIL||LA15_1==SELF||(LA15_1>=STRING && LA15_1<=TRUE)))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:162:6: literal DOT
				{
				DebugLocation(162, 6);
				PushFollow(Follow._literal_in_call1084);
				literal34=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal34.Tree);
				DebugLocation(162, 14);
				DOT35=(IToken)Match(input,DOT,Follow._DOT_in_call1086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT35_tree = (object)adaptor.Create(DOT35);
				adaptor.AddChild(root_0, DOT35_tree);
				}
				DebugLocation(162, 37);
				if (state.backtracking == 0)
				{
					 retval.node = (literal34!=null?literal34.node:default(Node)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(164, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:164:5: (head= message DOT )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==NAME))
				{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_ChimpyParser_fragment)))
					{
						alt16 = 1;
					}


				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:164:6: head= message DOT
					{
					DebugLocation(164, 10);
					PushFollow(Follow._message_in_call1125);
					head=message();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
					DebugLocation(164, 19);
					DOT36=(IToken)Match(input,DOT,Follow._DOT_in_call1127); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DOT36_tree = (object)adaptor.Create(DOT36);
					adaptor.AddChild(root_0, DOT36_tree);
					}
					DebugLocation(164, 37);
					if (state.backtracking == 0)
					{
						 ((CallNode)(head!=null?head.node:default(CallNode))).Receiver=retval.node; retval.node = (head!=null?head.node:default(CallNode)); 
					}

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(166, 9);
			PushFollow(Follow._message_in_call1160);
			tail=message();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
			DebugLocation(166, 37);
			if (state.backtracking == 0)
			{
				 ((CallNode)(tail!=null?tail.node:default(CallNode))).Receiver=retval.node; retval.node = (tail!=null?tail.node:default(CallNode)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("call", 16);
			LeaveRule("call", 16);
			LeaveRule_call();
		}
		DebugLocation(167, 2);
		} finally { DebugExitRule(GrammarFileName, "call"); }
		return retval;

	}
	// $ANTLR end "call"

	private sealed partial class message_return : AstParserRuleReturnScope<object, IToken>
	{
		public CallNode node;
		public message_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_message();
	partial void LeaveRule_message();
	// $ANTLR start "message"
	// ./ChimpyLang/lang/ChimpyParser.g:170:1: message returns [CallNode node] : ( NAME | NAME OPEN_PARENT CLOSE_PARENT | NAME OPEN_PARENT arguments CLOSE_PARENT );
	[GrammarRule("message")]
	private ChimpyParser.message_return message()
	{
		EnterRule_message();
		EnterRule("message", 17);
		TraceIn("message", 17);
		ChimpyParser.message_return retval = new ChimpyParser.message_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NAME37 = default(IToken);
		IToken NAME38 = default(IToken);
		IToken OPEN_PARENT39 = default(IToken);
		IToken CLOSE_PARENT40 = default(IToken);
		IToken NAME41 = default(IToken);
		IToken OPEN_PARENT42 = default(IToken);
		IToken CLOSE_PARENT44 = default(IToken);
		ChimpyParser.arguments_return arguments43 = default(ChimpyParser.arguments_return);

		object NAME37_tree = default(object);
		object NAME38_tree = default(object);
		object OPEN_PARENT39_tree = default(object);
		object CLOSE_PARENT40_tree = default(object);
		object NAME41_tree = default(object);
		object OPEN_PARENT42_tree = default(object);
		object CLOSE_PARENT44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "message");
		DebugLocation(170, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:170:32: ( NAME | NAME OPEN_PARENT CLOSE_PARENT | NAME OPEN_PARENT arguments CLOSE_PARENT )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==NAME))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==OPEN_PARENT))
				{
					int LA17_3 = input.LA(3);

					if ((LA17_3==CLOSE_PARENT))
					{
						alt17 = 2;
					}
					else if ((LA17_3==AT||LA17_3==CLASS||(LA17_3>=CONSTANT && LA17_3<=DEF)||(LA17_3>=FALSE && LA17_3<=FLOAT)||(LA17_3>=IF && LA17_3<=INTEGER)||LA17_3==NAME||(LA17_3>=NIL && LA17_3<=NOT)||LA17_3==OPEN_PARENT||LA17_3==SELF||(LA17_3>=STRING && LA17_3<=TRY)||LA17_3==WHILE))
					{
						alt17 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_2==EOF||LA17_2==AND||LA17_2==CATCH||LA17_2==CLOSE_PARENT||LA17_2==COMMA||(LA17_2>=DIV && LA17_2<=EQ)||(LA17_2>=GE && LA17_2<=GT)||LA17_2==LE||(LA17_2>=LT && LA17_2<=MUL)||LA17_2==NEWLINE||(LA17_2>=OR && LA17_2<=PLUS)||LA17_2==SEMICOLON))
				{
					alt17 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:171:5: NAME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 5);
				NAME37=(IToken)Match(input,NAME,Follow._NAME_in_message1200); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME37_tree = (object)adaptor.Create(NAME37);
				adaptor.AddChild(root_0, NAME37_tree);
				}
				DebugLocation(171, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME37!=null?NAME37.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:172:5: NAME OPEN_PARENT CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 5);
				NAME38=(IToken)Match(input,NAME,Follow._NAME_in_message1235); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME38_tree = (object)adaptor.Create(NAME38);
				adaptor.AddChild(root_0, NAME38_tree);
				}
				DebugLocation(172, 10);
				OPEN_PARENT39=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_message1237); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT39_tree = (object)adaptor.Create(OPEN_PARENT39);
				adaptor.AddChild(root_0, OPEN_PARENT39_tree);
				}
				DebugLocation(172, 22);
				CLOSE_PARENT40=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_message1239); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT40_tree = (object)adaptor.Create(CLOSE_PARENT40);
				adaptor.AddChild(root_0, CLOSE_PARENT40_tree);
				}
				DebugLocation(172, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME38!=null?NAME38.Text:null), new List<Node>()); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./ChimpyLang/lang/ChimpyParser.g:173:5: NAME OPEN_PARENT arguments CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(173, 5);
				NAME41=(IToken)Match(input,NAME,Follow._NAME_in_message1249); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME41_tree = (object)adaptor.Create(NAME41);
				adaptor.AddChild(root_0, NAME41_tree);
				}
				DebugLocation(173, 10);
				OPEN_PARENT42=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_message1251); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT42_tree = (object)adaptor.Create(OPEN_PARENT42);
				adaptor.AddChild(root_0, OPEN_PARENT42_tree);
				}
				DebugLocation(174, 12);
				PushFollow(Follow._arguments_in_message1264);
				arguments43=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments43.Tree);
				DebugLocation(175, 10);
				CLOSE_PARENT44=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_message1275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT44_tree = (object)adaptor.Create(CLOSE_PARENT44);
				adaptor.AddChild(root_0, CLOSE_PARENT44_tree);
				}
				DebugLocation(175, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME41!=null?NAME41.Text:null), (arguments43!=null?arguments43.nodes:default(List<Node>))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("message", 17);
			LeaveRule("message", 17);
			LeaveRule_message();
		}
		DebugLocation(176, 2);
		} finally { DebugExitRule(GrammarFileName, "message"); }
		return retval;

	}
	// $ANTLR end "message"

	private sealed partial class arguments_return : AstParserRuleReturnScope<object, IToken>
	{
		public List<Node> nodes;
		public arguments_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// ./ChimpyLang/lang/ChimpyParser.g:179:1: arguments returns [List<Node> nodes] :head= expression ( COMMA tail= expression )* ;
	[GrammarRule("arguments")]
	private ChimpyParser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 18);
		TraceIn("arguments", 18);
		ChimpyParser.arguments_return retval = new ChimpyParser.arguments_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA45 = default(IToken);
		ChimpyParser.expression_return head = default(ChimpyParser.expression_return);
		ChimpyParser.expression_return tail = default(ChimpyParser.expression_return);

		object COMMA45_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(179, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:179:37: (head= expression ( COMMA tail= expression )* )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:180:37: head= expression ( COMMA tail= expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 37);
			if (state.backtracking == 0)
			{
				 retval.nodes = new List<Node>(); 
			}
			DebugLocation(181, 9);
			PushFollow(Follow._expression_in_arguments1350);
			head=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
			DebugLocation(181, 37);
			if (state.backtracking == 0)
			{
				 retval.nodes.Add((head!=null?head.node:default(Node))); 
			}
			DebugLocation(182, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:182:5: ( COMMA tail= expression )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==COMMA))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:182:6: COMMA tail= expression
					{
					DebugLocation(182, 6);
					COMMA45=(IToken)Match(input,COMMA,Follow._COMMA_in_arguments1375); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA45_tree = (object)adaptor.Create(COMMA45);
					adaptor.AddChild(root_0, COMMA45_tree);
					}
					DebugLocation(183, 10);
					PushFollow(Follow._expression_in_arguments1384);
					tail=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
					DebugLocation(183, 37);
					if (state.backtracking == 0)
					{
						 retval.nodes.Add((tail!=null?tail.node:default(Node))); 
					}

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("arguments", 18);
			LeaveRule("arguments", 18);
			LeaveRule_arguments();
		}
		DebugLocation(185, 2);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class constant_return : AstParserRuleReturnScope<object, IToken>
	{
		public ConstantNode node;
		public constant_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// ./ChimpyLang/lang/ChimpyParser.g:188:1: constant returns [ConstantNode node] : CONSTANT ;
	[GrammarRule("constant")]
	private ChimpyParser.constant_return constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
		ChimpyParser.constant_return retval = new ChimpyParser.constant_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CONSTANT46 = default(IToken);

		object CONSTANT46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(188, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:188:37: ( CONSTANT )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:189:5: CONSTANT
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(189, 5);
			CONSTANT46=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_constant1427); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CONSTANT46_tree = (object)adaptor.Create(CONSTANT46);
			adaptor.AddChild(root_0, CONSTANT46_tree);
			}
			DebugLocation(189, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new ConstantNode((CONSTANT46!=null?CONSTANT46.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
		}
		DebugLocation(190, 2);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	private sealed partial class assign_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public assign_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_assign();
	partial void LeaveRule_assign();
	// $ANTLR start "assign"
	// ./ChimpyLang/lang/ChimpyParser.g:193:1: assign returns [Node node] : ( NAME ASSIGN expression | CONSTANT ASSIGN expression | AT NAME ASSIGN expression );
	[GrammarRule("assign")]
	private ChimpyParser.assign_return assign()
	{
		EnterRule_assign();
		EnterRule("assign", 20);
		TraceIn("assign", 20);
		ChimpyParser.assign_return retval = new ChimpyParser.assign_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NAME47 = default(IToken);
		IToken ASSIGN48 = default(IToken);
		IToken CONSTANT50 = default(IToken);
		IToken ASSIGN51 = default(IToken);
		IToken AT53 = default(IToken);
		IToken NAME54 = default(IToken);
		IToken ASSIGN55 = default(IToken);
		ChimpyParser.expression_return expression49 = default(ChimpyParser.expression_return);
		ChimpyParser.expression_return expression52 = default(ChimpyParser.expression_return);
		ChimpyParser.expression_return expression56 = default(ChimpyParser.expression_return);

		object NAME47_tree = default(object);
		object ASSIGN48_tree = default(object);
		object CONSTANT50_tree = default(object);
		object ASSIGN51_tree = default(object);
		object AT53_tree = default(object);
		object NAME54_tree = default(object);
		object ASSIGN55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assign");
		DebugLocation(193, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:193:27: ( NAME ASSIGN expression | CONSTANT ASSIGN expression | AT NAME ASSIGN expression )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case NAME:
				{
				alt19 = 1;
				}
				break;
			case CONSTANT:
				{
				alt19 = 2;
				}
				break;
			case AT:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:194:5: NAME ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 5);
				NAME47=(IToken)Match(input,NAME,Follow._NAME_in_assign1471); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME47_tree = (object)adaptor.Create(NAME47);
				adaptor.AddChild(root_0, NAME47_tree);
				}
				DebugLocation(194, 10);
				ASSIGN48=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1473); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN48_tree = (object)adaptor.Create(ASSIGN48);
				adaptor.AddChild(root_0, ASSIGN48_tree);
				}
				DebugLocation(194, 17);
				PushFollow(Follow._expression_in_assign1475);
				expression49=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression49.Tree);
				DebugLocation(194, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new LocalAssignNode((NAME47!=null?NAME47.Text:null), (expression49!=null?expression49.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./ChimpyLang/lang/ChimpyParser.g:195:5: CONSTANT ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 5);
				CONSTANT50=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_assign1492); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CONSTANT50_tree = (object)adaptor.Create(CONSTANT50);
				adaptor.AddChild(root_0, CONSTANT50_tree);
				}
				DebugLocation(195, 14);
				ASSIGN51=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1494); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN51_tree = (object)adaptor.Create(ASSIGN51);
				adaptor.AddChild(root_0, ASSIGN51_tree);
				}
				DebugLocation(195, 21);
				PushFollow(Follow._expression_in_assign1496);
				expression52=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression52.Tree);
				DebugLocation(195, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new ConstantAssignNode((CONSTANT50!=null?CONSTANT50.Text:null), (expression52!=null?expression52.node:default(Node))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./ChimpyLang/lang/ChimpyParser.g:196:5: AT NAME ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 5);
				AT53=(IToken)Match(input,AT,Follow._AT_in_assign1509); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AT53_tree = (object)adaptor.Create(AT53);
				adaptor.AddChild(root_0, AT53_tree);
				}
				DebugLocation(196, 8);
				NAME54=(IToken)Match(input,NAME,Follow._NAME_in_assign1511); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME54_tree = (object)adaptor.Create(NAME54);
				adaptor.AddChild(root_0, NAME54_tree);
				}
				DebugLocation(196, 13);
				ASSIGN55=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1513); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN55_tree = (object)adaptor.Create(ASSIGN55);
				adaptor.AddChild(root_0, ASSIGN55_tree);
				}
				DebugLocation(196, 20);
				PushFollow(Follow._expression_in_assign1515);
				expression56=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression56.Tree);
				DebugLocation(196, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new InstanceVariableAssignNode((NAME54!=null?NAME54.Text:null), (expression56!=null?expression56.node:default(Node))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("assign", 20);
			LeaveRule("assign", 20);
			LeaveRule_assign();
		}
		DebugLocation(197, 2);
		} finally { DebugExitRule(GrammarFileName, "assign"); }
		return retval;

	}
	// $ANTLR end "assign"

	private sealed partial class methodDefinition_return : AstParserRuleReturnScope<object, IToken>
	{
		public MethodDefinitionNode node;
		public methodDefinition_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_methodDefinition();
	partial void LeaveRule_methodDefinition();
	// $ANTLR start "methodDefinition"
	// ./ChimpyLang/lang/ChimpyParser.g:199:1: methodDefinition returns [MethodDefinitionNode node] : DEF NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END ;
	[GrammarRule("methodDefinition")]
	private ChimpyParser.methodDefinition_return methodDefinition()
	{
		EnterRule_methodDefinition();
		EnterRule("methodDefinition", 21);
		TraceIn("methodDefinition", 21);
		ChimpyParser.methodDefinition_return retval = new ChimpyParser.methodDefinition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DEF57 = default(IToken);
		IToken NAME58 = default(IToken);
		IToken OPEN_PARENT59 = default(IToken);
		IToken CLOSE_PARENT61 = default(IToken);
		IToken END64 = default(IToken);
		ChimpyParser.parameters_return parameters60 = default(ChimpyParser.parameters_return);
		AstParserRuleReturnScope<object, IToken> terminator62 = default(AstParserRuleReturnScope<object, IToken>);
		ChimpyParser.expressions_return expressions63 = default(ChimpyParser.expressions_return);

		object DEF57_tree = default(object);
		object NAME58_tree = default(object);
		object OPEN_PARENT59_tree = default(object);
		object CLOSE_PARENT61_tree = default(object);
		object END64_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodDefinition");
		DebugLocation(199, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:199:53: ( DEF NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:200:5: DEF NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(200, 5);
			DEF57=(IToken)Match(input,DEF,Follow._DEF_in_methodDefinition1541); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DEF57_tree = (object)adaptor.Create(DEF57);
			adaptor.AddChild(root_0, DEF57_tree);
			}
			DebugLocation(200, 9);
			NAME58=(IToken)Match(input,NAME,Follow._NAME_in_methodDefinition1543); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME58_tree = (object)adaptor.Create(NAME58);
			adaptor.AddChild(root_0, NAME58_tree);
			}
			DebugLocation(200, 14);
			// ./ChimpyLang/lang/ChimpyParser.g:200:14: ( OPEN_PARENT ( parameters )? CLOSE_PARENT )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==OPEN_PARENT))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:200:15: OPEN_PARENT ( parameters )? CLOSE_PARENT
				{
				DebugLocation(200, 15);
				OPEN_PARENT59=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_methodDefinition1546); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT59_tree = (object)adaptor.Create(OPEN_PARENT59);
				adaptor.AddChild(root_0, OPEN_PARENT59_tree);
				}
				DebugLocation(200, 27);
				// ./ChimpyLang/lang/ChimpyParser.g:200:27: ( parameters )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==NAME))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:200:27: parameters
					{
					DebugLocation(200, 27);
					PushFollow(Follow._parameters_in_methodDefinition1548);
					parameters60=parameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameters60.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(200, 39);
				CLOSE_PARENT61=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_methodDefinition1551); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT61_tree = (object)adaptor.Create(CLOSE_PARENT61);
				adaptor.AddChild(root_0, CLOSE_PARENT61_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(200, 54);
			PushFollow(Follow._terminator_in_methodDefinition1555);
			terminator62=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator62.Tree);
			DebugLocation(201, 7);
			PushFollow(Follow._expressions_in_methodDefinition1563);
			expressions63=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expressions63.Tree);
			DebugLocation(202, 5);
			END64=(IToken)Match(input,END,Follow._END_in_methodDefinition1569); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END64_tree = (object)adaptor.Create(END64);
			adaptor.AddChild(root_0, END64_tree);
			}
			DebugLocation(202, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new MethodDefinitionNode((NAME58!=null?NAME58.Text:null), (parameters60!=null?parameters60.names:default(List<string>)), (expressions63!=null?expressions63.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("methodDefinition", 21);
			LeaveRule("methodDefinition", 21);
			LeaveRule_methodDefinition();
		}
		DebugLocation(203, 2);
		} finally { DebugExitRule(GrammarFileName, "methodDefinition"); }
		return retval;

	}
	// $ANTLR end "methodDefinition"

	private sealed partial class parameters_return : AstParserRuleReturnScope<object, IToken>
	{
		public List<string> names;
		public parameters_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();
	// $ANTLR start "parameters"
	// ./ChimpyLang/lang/ChimpyParser.g:206:1: parameters returns [List<string> names] :head= NAME ( COMMA tail= NAME )* ;
	[GrammarRule("parameters")]
	private ChimpyParser.parameters_return parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 22);
		TraceIn("parameters", 22);
		ChimpyParser.parameters_return retval = new ChimpyParser.parameters_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken head = default(IToken);
		IToken tail = default(IToken);
		IToken COMMA65 = default(IToken);

		object head_tree = default(object);
		object tail_tree = default(object);
		object COMMA65_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(206, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:206:40: (head= NAME ( COMMA tail= NAME )* )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:207:37: head= NAME ( COMMA tail= NAME )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(207, 37);
			if (state.backtracking == 0)
			{
				 retval.names = new List<string>(); 
			}
			DebugLocation(208, 9);
			head=(IToken)Match(input,NAME,Follow._NAME_in_parameters1658); if (state.failed) return retval;
			if (state.backtracking == 0) {
			head_tree = (object)adaptor.Create(head);
			adaptor.AddChild(root_0, head_tree);
			}
			DebugLocation(208, 37);
			if (state.backtracking == 0)
			{
				 retval.names.Add((head!=null?head.Text:null)); 
			}
			DebugLocation(209, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:209:5: ( COMMA tail= NAME )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==COMMA))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:209:6: COMMA tail= NAME
					{
					DebugLocation(209, 6);
					COMMA65=(IToken)Match(input,COMMA,Follow._COMMA_in_parameters1689); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA65_tree = (object)adaptor.Create(COMMA65);
					adaptor.AddChild(root_0, COMMA65_tree);
					}
					DebugLocation(210, 10);
					tail=(IToken)Match(input,NAME,Follow._NAME_in_parameters1698); if (state.failed) return retval;
					if (state.backtracking == 0) {
					tail_tree = (object)adaptor.Create(tail);
					adaptor.AddChild(root_0, tail_tree);
					}
					DebugLocation(210, 37);
					if (state.backtracking == 0)
					{
						 retval.names.Add((tail!=null?tail.Text:null)); 
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("parameters", 22);
			LeaveRule("parameters", 22);
			LeaveRule_parameters();
		}
		DebugLocation(212, 2);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return retval;

	}
	// $ANTLR end "parameters"

	private sealed partial class classDefinition_return : AstParserRuleReturnScope<object, IToken>
	{
		public ClassDefinitionNode node;
		public classDefinition_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// ./ChimpyLang/lang/ChimpyParser.g:214:1: classDefinition returns [ClassDefinitionNode node] : CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END ;
	[GrammarRule("classDefinition")]
	private ChimpyParser.classDefinition_return classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 23);
		TraceIn("classDefinition", 23);
		ChimpyParser.classDefinition_return retval = new ChimpyParser.classDefinition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken name = default(IToken);
		IToken superClass = default(IToken);
		IToken CLASS66 = default(IToken);
		IToken LT67 = default(IToken);
		IToken END70 = default(IToken);
		AstParserRuleReturnScope<object, IToken> terminator68 = default(AstParserRuleReturnScope<object, IToken>);
		ChimpyParser.expressions_return expressions69 = default(ChimpyParser.expressions_return);

		object name_tree = default(object);
		object superClass_tree = default(object);
		object CLASS66_tree = default(object);
		object LT67_tree = default(object);
		object END70_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(214, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:214:51: ( CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:215:5: CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 5);
			CLASS66=(IToken)Match(input,CLASS,Follow._CLASS_in_classDefinition1746); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CLASS66_tree = (object)adaptor.Create(CLASS66);
			adaptor.AddChild(root_0, CLASS66_tree);
			}
			DebugLocation(215, 15);
			name=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_classDefinition1750); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (object)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(215, 25);
			// ./ChimpyLang/lang/ChimpyParser.g:215:25: ( LT superClass= CONSTANT )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==LT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:215:26: LT superClass= CONSTANT
				{
				DebugLocation(215, 26);
				LT67=(IToken)Match(input,LT,Follow._LT_in_classDefinition1753); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LT67_tree = (object)adaptor.Create(LT67);
				adaptor.AddChild(root_0, LT67_tree);
				}
				DebugLocation(215, 39);
				superClass=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_classDefinition1757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				superClass_tree = (object)adaptor.Create(superClass);
				adaptor.AddChild(root_0, superClass_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(215, 51);
			PushFollow(Follow._terminator_in_classDefinition1761);
			terminator68=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator68.Tree);
			DebugLocation(216, 7);
			PushFollow(Follow._expressions_in_classDefinition1769);
			expressions69=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expressions69.Tree);
			DebugLocation(217, 5);
			END70=(IToken)Match(input,END,Follow._END_in_classDefinition1775); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END70_tree = (object)adaptor.Create(END70);
			adaptor.AddChild(root_0, END70_tree);
			}
			DebugLocation(217, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new ClassDefinitionNode((name!=null?name.Text:null), (superClass!=null?superClass.Text:null), (expressions69!=null?expressions69.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("classDefinition", 23);
			LeaveRule("classDefinition", 23);
			LeaveRule_classDefinition();
		}
		DebugLocation(218, 2);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	private sealed partial class ifBlock_return : AstParserRuleReturnScope<object, IToken>
	{
		public IfNode node;
		public ifBlock_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_ifBlock();
	partial void LeaveRule_ifBlock();
	// $ANTLR start "ifBlock"
	// ./ChimpyLang/lang/ChimpyParser.g:220:1: ifBlock returns [IfNode node] : IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END ;
	[GrammarRule("ifBlock")]
	private ChimpyParser.ifBlock_return ifBlock()
	{
		EnterRule_ifBlock();
		EnterRule("ifBlock", 24);
		TraceIn("ifBlock", 24);
		ChimpyParser.ifBlock_return retval = new ChimpyParser.ifBlock_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IF71 = default(IToken);
		IToken ELSE73 = default(IToken);
		IToken END75 = default(IToken);
		ChimpyParser.expression_return condition = default(ChimpyParser.expression_return);
		ChimpyParser.expressions_return ifBody = default(ChimpyParser.expressions_return);
		ChimpyParser.expressions_return elseBody = default(ChimpyParser.expressions_return);
		AstParserRuleReturnScope<object, IToken> terminator72 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> terminator74 = default(AstParserRuleReturnScope<object, IToken>);

		object IF71_tree = default(object);
		object ELSE73_tree = default(object);
		object END75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ifBlock");
		DebugLocation(220, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:220:30: ( IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:221:5: IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(221, 5);
			IF71=(IToken)Match(input,IF,Follow._IF_in_ifBlock1823); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IF71_tree = (object)adaptor.Create(IF71);
			adaptor.AddChild(root_0, IF71_tree);
			}
			DebugLocation(221, 17);
			PushFollow(Follow._expression_in_ifBlock1827);
			condition=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, condition.Tree);
			DebugLocation(221, 29);
			PushFollow(Follow._terminator_in_ifBlock1829);
			terminator72=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator72.Tree);
			DebugLocation(222, 13);
			PushFollow(Follow._expressions_in_ifBlock1839);
			ifBody=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ifBody.Tree);
			DebugLocation(223, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:223:5: ( ELSE terminator elseBody= expressions )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==ELSE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// ./ChimpyLang/lang/ChimpyParser.g:223:6: ELSE terminator elseBody= expressions
				{
				DebugLocation(223, 6);
				ELSE73=(IToken)Match(input,ELSE,Follow._ELSE_in_ifBlock1846); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ELSE73_tree = (object)adaptor.Create(ELSE73);
				adaptor.AddChild(root_0, ELSE73_tree);
				}
				DebugLocation(223, 11);
				PushFollow(Follow._terminator_in_ifBlock1848);
				terminator74=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator74.Tree);
				DebugLocation(224, 15);
				PushFollow(Follow._expressions_in_ifBlock1858);
				elseBody=expressions();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elseBody.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(226, 5);
			END75=(IToken)Match(input,END,Follow._END_in_ifBlock1871); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END75_tree = (object)adaptor.Create(END75);
			adaptor.AddChild(root_0, END75_tree);
			}
			DebugLocation(226, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new IfNode((condition!=null?condition.node:default(Node)), (ifBody!=null?ifBody.nodes:default(Nodes)), (elseBody!=null?elseBody.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("ifBlock", 24);
			LeaveRule("ifBlock", 24);
			LeaveRule_ifBlock();
		}
		DebugLocation(227, 2);
		} finally { DebugExitRule(GrammarFileName, "ifBlock"); }
		return retval;

	}
	// $ANTLR end "ifBlock"

	private sealed partial class whileBlock_return : AstParserRuleReturnScope<object, IToken>
	{
		public WhileNode node;
		public whileBlock_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_whileBlock();
	partial void LeaveRule_whileBlock();
	// $ANTLR start "whileBlock"
	// ./ChimpyLang/lang/ChimpyParser.g:229:1: whileBlock returns [WhileNode node] : WHILE condition= expression terminator body= expressions END ;
	[GrammarRule("whileBlock")]
	private ChimpyParser.whileBlock_return whileBlock()
	{
		EnterRule_whileBlock();
		EnterRule("whileBlock", 25);
		TraceIn("whileBlock", 25);
		ChimpyParser.whileBlock_return retval = new ChimpyParser.whileBlock_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHILE76 = default(IToken);
		IToken END78 = default(IToken);
		ChimpyParser.expression_return condition = default(ChimpyParser.expression_return);
		ChimpyParser.expressions_return body = default(ChimpyParser.expressions_return);
		AstParserRuleReturnScope<object, IToken> terminator77 = default(AstParserRuleReturnScope<object, IToken>);

		object WHILE76_tree = default(object);
		object END78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "whileBlock");
		DebugLocation(229, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:229:36: ( WHILE condition= expression terminator body= expressions END )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:230:5: WHILE condition= expression terminator body= expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(230, 5);
			WHILE76=(IToken)Match(input,WHILE,Follow._WHILE_in_whileBlock1919); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WHILE76_tree = (object)adaptor.Create(WHILE76);
			adaptor.AddChild(root_0, WHILE76_tree);
			}
			DebugLocation(230, 20);
			PushFollow(Follow._expression_in_whileBlock1923);
			condition=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, condition.Tree);
			DebugLocation(230, 32);
			PushFollow(Follow._terminator_in_whileBlock1925);
			terminator77=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator77.Tree);
			DebugLocation(231, 11);
			PushFollow(Follow._expressions_in_whileBlock1935);
			body=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, body.Tree);
			DebugLocation(232, 5);
			END78=(IToken)Match(input,END,Follow._END_in_whileBlock1941); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END78_tree = (object)adaptor.Create(END78);
			adaptor.AddChild(root_0, END78_tree);
			}
			DebugLocation(232, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new WhileNode((condition!=null?condition.node:default(Node)), (body!=null?body.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("whileBlock", 25);
			LeaveRule("whileBlock", 25);
			LeaveRule_whileBlock();
		}
		DebugLocation(233, 2);
		} finally { DebugExitRule(GrammarFileName, "whileBlock"); }
		return retval;

	}
	// $ANTLR end "whileBlock"

	private sealed partial class tryBlock_return : AstParserRuleReturnScope<object, IToken>
	{
		public TryNode node;
		public tryBlock_return(ChimpyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChimpyParser grammar);
	}

	partial void EnterRule_tryBlock();
	partial void LeaveRule_tryBlock();
	// $ANTLR start "tryBlock"
	// ./ChimpyLang/lang/ChimpyParser.g:235:1: tryBlock returns [TryNode node] : TRY terminator tryBody= expressions ( CATCH CONSTANT COLON NAME terminator catchBody= expressions )* END ;
	[GrammarRule("tryBlock")]
	private ChimpyParser.tryBlock_return tryBlock()
	{
		EnterRule_tryBlock();
		EnterRule("tryBlock", 26);
		TraceIn("tryBlock", 26);
		ChimpyParser.tryBlock_return retval = new ChimpyParser.tryBlock_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TRY79 = default(IToken);
		IToken CATCH81 = default(IToken);
		IToken CONSTANT82 = default(IToken);
		IToken COLON83 = default(IToken);
		IToken NAME84 = default(IToken);
		IToken END86 = default(IToken);
		ChimpyParser.expressions_return tryBody = default(ChimpyParser.expressions_return);
		ChimpyParser.expressions_return catchBody = default(ChimpyParser.expressions_return);
		AstParserRuleReturnScope<object, IToken> terminator80 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> terminator85 = default(AstParserRuleReturnScope<object, IToken>);

		object TRY79_tree = default(object);
		object CATCH81_tree = default(object);
		object CONSTANT82_tree = default(object);
		object COLON83_tree = default(object);
		object NAME84_tree = default(object);
		object END86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryBlock");
		DebugLocation(235, 2);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:235:32: ( TRY terminator tryBody= expressions ( CATCH CONSTANT COLON NAME terminator catchBody= expressions )* END )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:236:5: TRY terminator tryBody= expressions ( CATCH CONSTANT COLON NAME terminator catchBody= expressions )* END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(236, 5);
			TRY79=(IToken)Match(input,TRY,Follow._TRY_in_tryBlock1989); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TRY79_tree = (object)adaptor.Create(TRY79);
			adaptor.AddChild(root_0, TRY79_tree);
			}
			DebugLocation(236, 9);
			PushFollow(Follow._terminator_in_tryBlock1991);
			terminator80=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator80.Tree);
			DebugLocation(237, 14);
			PushFollow(Follow._expressions_in_tryBlock2001);
			tryBody=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, tryBody.Tree);
			DebugLocation(237, 45);
			if (state.backtracking == 0)
			{
				 retval.node = new TryNode((tryBody!=null?tryBody.nodes:default(Nodes))); 
			}
			DebugLocation(238, 5);
			// ./ChimpyLang/lang/ChimpyParser.g:238:5: ( CATCH CONSTANT COLON NAME terminator catchBody= expressions )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==CATCH))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./ChimpyLang/lang/ChimpyParser.g:238:6: CATCH CONSTANT COLON NAME terminator catchBody= expressions
					{
					DebugLocation(238, 6);
					CATCH81=(IToken)Match(input,CATCH,Follow._CATCH_in_tryBlock2028); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CATCH81_tree = (object)adaptor.Create(CATCH81);
					adaptor.AddChild(root_0, CATCH81_tree);
					}
					DebugLocation(238, 12);
					CONSTANT82=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_tryBlock2030); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CONSTANT82_tree = (object)adaptor.Create(CONSTANT82);
					adaptor.AddChild(root_0, CONSTANT82_tree);
					}
					DebugLocation(238, 21);
					COLON83=(IToken)Match(input,COLON,Follow._COLON_in_tryBlock2032); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COLON83_tree = (object)adaptor.Create(COLON83);
					adaptor.AddChild(root_0, COLON83_tree);
					}
					DebugLocation(238, 27);
					NAME84=(IToken)Match(input,NAME,Follow._NAME_in_tryBlock2034); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NAME84_tree = (object)adaptor.Create(NAME84);
					adaptor.AddChild(root_0, NAME84_tree);
					}
					DebugLocation(238, 32);
					PushFollow(Follow._terminator_in_tryBlock2036);
					terminator85=terminator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, terminator85.Tree);
					DebugLocation(239, 16);
					PushFollow(Follow._expressions_in_tryBlock2046);
					catchBody=expressions();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catchBody.Tree);
					DebugLocation(239, 45);
					if (state.backtracking == 0)
					{
						 retval.node.AddCatchBlock((CONSTANT82!=null?CONSTANT82.Text:null), (NAME84!=null?NAME84.Text:null), (catchBody!=null?catchBody.nodes:default(Nodes)));  
					}

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(241, 5);
			END86=(IToken)Match(input,END,Follow._END_in_tryBlock2077); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END86_tree = (object)adaptor.Create(END86);
			adaptor.AddChild(root_0, END86_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("tryBlock", 26);
			LeaveRule("tryBlock", 26);
			LeaveRule_tryBlock();
		}
		DebugLocation(242, 2);
		} finally { DebugExitRule(GrammarFileName, "tryBlock"); }
		return retval;

	}
	// $ANTLR end "tryBlock"

	partial void EnterRule_synpred8_ChimpyParser_fragment();
	partial void LeaveRule_synpred8_ChimpyParser_fragment();

	// $ANTLR start synpred8_ChimpyParser
	public void synpred8_ChimpyParser_fragment()
	{
		ChimpyParser.andExpression_return receiver = default(ChimpyParser.andExpression_return);
		ChimpyParser.orExpression_return arg = default(ChimpyParser.orExpression_return);

		EnterRule_synpred8_ChimpyParser_fragment();
		EnterRule("synpred8_ChimpyParser_fragment", 34);
		TraceIn("synpred8_ChimpyParser_fragment", 34);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:88:5: (receiver= andExpression OR arg= orExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:88:5: receiver= andExpression OR arg= orExpression
			{
			DebugLocation(88, 13);
			PushFollow(Follow._andExpression_in_synpred8_ChimpyParser299);
			receiver=andExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(89, 7);
			Match(input,OR,Follow._OR_in_synpred8_ChimpyParser307); if (state.failed) return;
			DebugLocation(89, 13);
			PushFollow(Follow._orExpression_in_synpred8_ChimpyParser311);
			arg=orExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_ChimpyParser_fragment", 34);
			LeaveRule("synpred8_ChimpyParser_fragment", 34);
			LeaveRule_synpred8_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred8_ChimpyParser

	partial void EnterRule_synpred9_ChimpyParser_fragment();
	partial void LeaveRule_synpred9_ChimpyParser_fragment();

	// $ANTLR start synpred9_ChimpyParser
	public void synpred9_ChimpyParser_fragment()
	{
		ChimpyParser.relationalExpression_return receiver = default(ChimpyParser.relationalExpression_return);
		ChimpyParser.andExpression_return arg = default(ChimpyParser.andExpression_return);

		EnterRule_synpred9_ChimpyParser_fragment();
		EnterRule("synpred9_ChimpyParser_fragment", 35);
		TraceIn("synpred9_ChimpyParser_fragment", 35);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:94:5: (receiver= relationalExpression AND arg= andExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:94:5: receiver= relationalExpression AND arg= andExpression
			{
			DebugLocation(94, 13);
			PushFollow(Follow._relationalExpression_in_synpred9_ChimpyParser361);
			receiver=relationalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(95, 7);
			Match(input,AND,Follow._AND_in_synpred9_ChimpyParser369); if (state.failed) return;
			DebugLocation(95, 14);
			PushFollow(Follow._andExpression_in_synpred9_ChimpyParser373);
			arg=andExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_ChimpyParser_fragment", 35);
			LeaveRule("synpred9_ChimpyParser_fragment", 35);
			LeaveRule_synpred9_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred9_ChimpyParser

	partial void EnterRule_synpred14_ChimpyParser_fragment();
	partial void LeaveRule_synpred14_ChimpyParser_fragment();

	// $ANTLR start synpred14_ChimpyParser
	public void synpred14_ChimpyParser_fragment()
	{
		IToken op = default(IToken);
		ChimpyParser.additiveExpression_return receiver = default(ChimpyParser.additiveExpression_return);
		ChimpyParser.relationalExpression_return arg = default(ChimpyParser.relationalExpression_return);

		EnterRule_synpred14_ChimpyParser_fragment();
		EnterRule("synpred14_ChimpyParser_fragment", 40);
		TraceIn("synpred14_ChimpyParser_fragment", 40);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:100:5: (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:100:5: receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression
			{
			DebugLocation(100, 13);
			PushFollow(Follow._additiveExpression_in_synpred14_ChimpyParser414);
			receiver=additiveExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(101, 9);

			op=(IToken)input.LT(1);
			if (input.LA(1)==EQ||(input.LA(1)>=GE && input.LA(1)<=GT)||input.LA(1)==LE||input.LA(1)==LT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(102, 10);
			PushFollow(Follow._relationalExpression_in_synpred14_ChimpyParser444);
			arg=relationalExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_ChimpyParser_fragment", 40);
			LeaveRule("synpred14_ChimpyParser_fragment", 40);
			LeaveRule_synpred14_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred14_ChimpyParser

	partial void EnterRule_synpred16_ChimpyParser_fragment();
	partial void LeaveRule_synpred16_ChimpyParser_fragment();

	// $ANTLR start synpred16_ChimpyParser
	public void synpred16_ChimpyParser_fragment()
	{
		IToken op = default(IToken);
		ChimpyParser.multiplicativeExpression_return receiver = default(ChimpyParser.multiplicativeExpression_return);
		ChimpyParser.additiveExpression_return arg = default(ChimpyParser.additiveExpression_return);

		EnterRule_synpred16_ChimpyParser_fragment();
		EnterRule("synpred16_ChimpyParser_fragment", 42);
		TraceIn("synpred16_ChimpyParser_fragment", 42);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:107:5: (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:107:5: receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression
			{
			DebugLocation(107, 13);
			PushFollow(Follow._multiplicativeExpression_in_synpred16_ChimpyParser484);
			receiver=multiplicativeExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(108, 9);

			op=(IToken)input.LT(1);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(108, 26);
			PushFollow(Follow._additiveExpression_in_synpred16_ChimpyParser502);
			arg=additiveExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_ChimpyParser_fragment", 42);
			LeaveRule("synpred16_ChimpyParser_fragment", 42);
			LeaveRule_synpred16_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred16_ChimpyParser

	partial void EnterRule_synpred19_ChimpyParser_fragment();
	partial void LeaveRule_synpred19_ChimpyParser_fragment();

	// $ANTLR start synpred19_ChimpyParser
	public void synpred19_ChimpyParser_fragment()
	{
		IToken op = default(IToken);
		ChimpyParser.unaryExpression_return receiver = default(ChimpyParser.unaryExpression_return);
		ChimpyParser.multiplicativeExpression_return arg = default(ChimpyParser.multiplicativeExpression_return);

		EnterRule_synpred19_ChimpyParser_fragment();
		EnterRule("synpred19_ChimpyParser_fragment", 45);
		TraceIn("synpred19_ChimpyParser_fragment", 45);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:113:5: (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:113:5: receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression
			{
			DebugLocation(113, 13);
			PushFollow(Follow._unaryExpression_in_synpred19_ChimpyParser550);
			receiver=unaryExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 9);

			op=(IToken)input.LT(1);
			if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(114, 27);
			PushFollow(Follow._multiplicativeExpression_in_synpred19_ChimpyParser570);
			arg=multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_ChimpyParser_fragment", 45);
			LeaveRule("synpred19_ChimpyParser_fragment", 45);
			LeaveRule_synpred19_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred19_ChimpyParser

	partial void EnterRule_synpred37_ChimpyParser_fragment();
	partial void LeaveRule_synpred37_ChimpyParser_fragment();

	// $ANTLR start synpred37_ChimpyParser
	public void synpred37_ChimpyParser_fragment()
	{
		ChimpyParser.message_return head = default(ChimpyParser.message_return);

		EnterRule_synpred37_ChimpyParser_fragment();
		EnterRule("synpred37_ChimpyParser_fragment", 63);
		TraceIn("synpred37_ChimpyParser_fragment", 63);
		try
		{
			// ./ChimpyLang/lang/ChimpyParser.g:164:6: (head= message DOT )
			DebugEnterAlt(1);
			// ./ChimpyLang/lang/ChimpyParser.g:164:6: head= message DOT
			{
			DebugLocation(164, 10);
			PushFollow(Follow._message_in_synpred37_ChimpyParser1125);
			head=message();
			PopFollow();
			if (state.failed) return;
			DebugLocation(164, 19);
			Match(input,DOT,Follow._DOT_in_synpred37_ChimpyParser1127); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_ChimpyParser_fragment", 63);
			LeaveRule("synpred37_ChimpyParser_fragment", 63);
			LeaveRule_synpred37_ChimpyParser_fragment();
		}
	}
	// $ANTLR end synpred37_ChimpyParser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x1\x7\x1\x6\x2\xFFFF";
		private const string DFA3_maxS =
			"\x1\x2C\x1\x32\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\xA\xFFFF\x2\x2\x10\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x3\x1\x2\x1\x3\x4\xFFFF\x2\x3\x3\xFFFF\x2\x2\x1\xFFFF\x2\x3\x3\xFFFF"+
				"\x2\x3\x7\xFFFF\x1\x3\x1\x1\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\x1"+
				"\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()* loopback of 64:5: ( terminator tail= expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _terminator_in_root91 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _expressions_in_root94 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root97 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressions145 = new BitSet(new ulong[]{0x101000000002UL});
		public static readonly BitSet _terminator_in_expressions156 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_expressions165 = new BitSet(new ulong[]{0x101000000002UL});
		public static readonly BitSet _terminator_in_expressions181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignExpression_in_expression201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_in_assignExpression245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orExpression_in_assignExpression270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_orExpression299 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _OR_in_orExpression307 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _orExpression_in_orExpression311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_orExpression327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_andExpression361 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _AND_in_andExpression369 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _andExpression_in_andExpression373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_andExpression387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_relationalExpression414 = new BitSet(new ulong[]{0x91900000UL});
		public static readonly BitSet _set_in_relationalExpression424 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _relationalExpression_in_relationalExpression444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_relationalExpression455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression484 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _set_in_additiveExpression494 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _additiveExpression_in_additiveExpression502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression550 = new BitSet(new ulong[]{0x600010000UL});
		public static readonly BitSet _set_in_multiplicativeExpression560 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _multiplicativeExpression_in_multiplicativeExpression570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpression632 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_in_primaryExpression706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDefinition_in_primaryExpression727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_primaryExpression736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifBlock_in_primaryExpression746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileBlock_in_primaryExpression764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryBlock_in_primaryExpression779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_PARENT_in_primaryExpression796 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_primaryExpression804 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _CLOSE_PARENT_in_primaryExpression810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_literal836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_in_literal855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_literal873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NIL_in_literal893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_literal915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_literal936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_literal956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceVariable_in_literal973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _self_in_literal982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELF_in_self1016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_instanceVariable1050 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NAME_in_instanceVariable1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_call1084 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _DOT_in_call1086 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _message_in_call1125 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _DOT_in_call1127 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _message_in_call1160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1235 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _OPEN_PARENT_in_message1237 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _CLOSE_PARENT_in_message1239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1249 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _OPEN_PARENT_in_message1251 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _arguments_in_message1264 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _CLOSE_PARENT_in_message1275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arguments1350 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _COMMA_in_arguments1375 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_arguments1384 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _CONSTANT_in_constant1427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_assign1471 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASSIGN_in_assign1473 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_assign1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONSTANT_in_assign1492 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASSIGN_in_assign1494 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_assign1496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_assign1509 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NAME_in_assign1511 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASSIGN_in_assign1513 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_assign1515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEF_in_methodDefinition1541 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NAME_in_methodDefinition1543 = new BitSet(new ulong[]{0x111000000000UL});
		public static readonly BitSet _OPEN_PARENT_in_methodDefinition1546 = new BitSet(new ulong[]{0x800000200UL});
		public static readonly BitSet _parameters_in_methodDefinition1548 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _CLOSE_PARENT_in_methodDefinition1551 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_methodDefinition1555 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_methodDefinition1563 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _END_in_methodDefinition1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_parameters1658 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _COMMA_in_parameters1689 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NAME_in_parameters1698 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _CLASS_in_classDefinition1746 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _CONSTANT_in_classDefinition1750 = new BitSet(new ulong[]{0x101080000000UL});
		public static readonly BitSet _LT_in_classDefinition1753 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _CONSTANT_in_classDefinition1757 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_classDefinition1761 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_classDefinition1769 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _END_in_classDefinition1775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifBlock1823 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_ifBlock1827 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_ifBlock1829 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_ifBlock1839 = new BitSet(new ulong[]{0xC0000UL});
		public static readonly BitSet _ELSE_in_ifBlock1846 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_ifBlock1848 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_ifBlock1858 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _END_in_ifBlock1871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileBlock1919 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expression_in_whileBlock1923 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_whileBlock1925 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_whileBlock1935 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _END_in_whileBlock1941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_tryBlock1989 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_tryBlock1991 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_tryBlock2001 = new BitSet(new ulong[]{0x80080UL});
		public static readonly BitSet _CATCH_in_tryBlock2028 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _CONSTANT_in_tryBlock2030 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _COLON_in_tryBlock2032 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NAME_in_tryBlock2034 = new BitSet(new ulong[]{0x101000000000UL});
		public static readonly BitSet _terminator_in_tryBlock2036 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _expressions_in_tryBlock2046 = new BitSet(new ulong[]{0x80080UL});
		public static readonly BitSet _END_in_tryBlock2077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_synpred8_ChimpyParser299 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _OR_in_synpred8_ChimpyParser307 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _orExpression_in_synpred8_ChimpyParser311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_synpred9_ChimpyParser361 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _AND_in_synpred9_ChimpyParser369 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _andExpression_in_synpred9_ChimpyParser373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_synpred14_ChimpyParser414 = new BitSet(new ulong[]{0x91900000UL});
		public static readonly BitSet _set_in_synpred14_ChimpyParser424 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _relationalExpression_in_synpred14_ChimpyParser444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred16_ChimpyParser484 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _set_in_synpred16_ChimpyParser494 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _additiveExpression_in_synpred16_ChimpyParser502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_synpred19_ChimpyParser550 = new BitSet(new ulong[]{0x600010000UL});
		public static readonly BitSet _set_in_synpred19_ChimpyParser560 = new BitSet(new ulong[]{0x5C9680C606140UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred19_ChimpyParser570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_in_synpred37_ChimpyParser1125 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _DOT_in_synpred37_ChimpyParser1127 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  ChimpyLang 
